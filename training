local Players = game:GetService("Players")
local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local checkpoints = workspace.Islands["Training Island"]["Outdoor Arena"].DynamicArena
    :WaitForChild("_LAYOUT")
    :WaitForChild("CheckpointActivity")
    :WaitForChild("Routes")
    :WaitForChild("Checkpoints")

local checkpointOrder = {"1", "2", "3", "4"}
local teleportDelay = 0.5
local teleporting = false

-- Create GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportToggleGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 120, 0, 40)
toggleButton.Position = UDim2.new(0, 20, 0, 100)
toggleButton.Text = "Start Teleport"
toggleButton.BackgroundColor3 = Color3.fromRGB(40, 170, 255)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 20
toggleButton.Parent = screenGui

-- Teleport loop in a coroutine
local function startTeleporting()
    teleporting = true
    toggleButton.Text = "Stop Teleport"
    while teleporting do
        for _, checkpointName in ipairs(checkpointOrder) do
            if not teleporting then break end
            local checkpoint = checkpoints:FindFirstChild(checkpointName)
            if checkpoint and checkpoint:IsA("BasePart") then
                humanoidRootPart.CFrame = checkpoint.CFrame + Vector3.new(0, 0, 0)
            end
            task.wait(teleportDelay)
        end
    end
end

toggleButton.MouseButton1Click:Connect(function()
    teleporting = not teleporting
    if teleporting then
        task.spawn(startTeleporting)
    else
        toggleButton.Text = "Start Teleport"
    end
end)
