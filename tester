------ === GUI Library Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("All Islands Teleport", "DarkTheme")

-- === Tabs ===
local TeleportTab = Window:NewTab("Main")
local TeleportSection = TeleportTab:NewSection("Teleport Controls")

local TravelTab = Window:NewTab("Island Travel")
local TravelSection = TravelTab:NewSection("Quick TP Buttons")

local TrainTab = Window:NewTab("Train")
local TrainSection = TrainTab:NewSection("Training Features")

local AutoTab = Window:NewTab("Auto")
local AutoSection = AutoTab:NewSection("Automation")

local ShopTab = Window:NewTab("Shop")
local ShopSection = ShopTab:NewSection("Shop Items")

local LunarVolcanoTab = Window:NewTab("Lunar/Volcano")
local LunarVolcanoSection = LunarVolcanoTab:NewSection("Special Teleports & Lava")

-- === Initialization ===
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local islandsFolder = workspace:WaitForChild("Islands")
local explorerFolder = workspace:FindFirstChild("Explorer")

-- Reconnect HRP on respawn
local function setupCharacter(newChar)
    character = newChar
    hrp = character:WaitForChild("HumanoidRootPart")
end
player.CharacterAdded:Connect(setupCharacter)

-- === Island Configuration ===
local islandConfigs = {
    ["Mainland"] = {},
    ["Forest Island"] = {},
    ["Mountain Island"] = {},
    ["Lunar Islands"] = {},
    ["Royal Island"] = {},
    ["Blizzard Island"] = {},
    ["Jungle Island"] = {},
    ["Volcano Island"] = {},
    ["Desert Island"] = {},
    ["Glacier Island"] = {},
}

-- === Universal Exclusions ===
for _, config in pairs(islandConfigs) do
    config["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true
    config["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true
    config["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true
    config["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true
    config["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true
    config["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true
    config["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true
    config["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true
    config["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true
    config["Horse"] = true
    config["Travel Boat"] = true
    config["c21e5cba-8957-4d65-9e54-1aaa2411a71c"] = true
end

-- === Helper: get all Body parts for an island + workspace UUIDs ===
local function getBodiesForIsland(folder, exclusions)
    local bodies = {}

    -- Bodies in the folder
    if folder then
        for _, model in ipairs(folder:GetChildren()) do
            if not exclusions[model.Name] then
                local body = model:FindFirstChild("Body")
                if body and body:IsA("BasePart") and body:IsDescendantOf(workspace) then
                    table.insert(bodies, body)
                end
            end
        end
    end

    -- Bodies directly in workspace
    for _, obj in ipairs(workspace:GetChildren()) do
        if obj:IsA("Model") and obj:FindFirstChild("Body") and not exclusions[obj.Name] then
            local body = obj:FindFirstChild("Body")
            if body and body:IsA("BasePart") and body:IsDescendantOf(workspace) then
                table.insert(bodies, body)
            end
        end
    end

    return bodies
end

-- === Teleport Toggles for Main Tab ===
local teleportToggles = {}
for islandName, excludedIds in pairs(islandConfigs) do
    teleportToggles[islandName] = false

    TeleportSection:NewToggle("Teleport " .. islandName, "Teleport to " .. islandName, function(state)
        teleportToggles[islandName] = state
    end)

    task.spawn(function()
        while true do
            if teleportToggles[islandName] then
                local folder = islandsFolder:FindFirstChild(islandName) or (explorerFolder and explorerFolder:FindFirstChild(islandName))
                if not folder then warn("Island not found: "..islandName) break end

                local bodies = getBodiesForIsland(folder, excludedIds)
                for _, body in ipairs(bodies) do
                    if not teleportToggles[islandName] then break end
                    while teleportToggles[islandName] and body:IsDescendantOf(workspace) do
                        hrp.CFrame = CFrame.new(body.Position + Vector3.new(0,5,0))
                        task.wait(0.05)
                    end
                    task.wait(0.1)
                end
            else
                task.wait(0.5)
            end
        end
    end)
end

-- === Travel Buttons ===
for islandName in pairs(islandConfigs) do
    TravelSection:NewButton("Travel to " .. islandName, "Use teleport remote", function()
        local args = {"\1", "Travel", islandName, 1}
        game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9)
            :WaitForChild("Functions", 9e9):GetChildren()[2]:FireServer(unpack(args))
    end)
end

-- === Lunar Island Positions & Toggle ===
local lunarPositions = {
    Vector3.new(-3097.421875, 17.63089942932129, -3681.2919921875),
    Vector3.new(-2759.49609375, 6.74829626083374, -2589.205810546875),
    Vector3.new(-2207.140380859375, 139.0631866455078, -1223.9427490234375),
    Vector3.new(-3266.90771484375, 15.430882453918457, -1436.565673828125),
    Vector3.new(-3357.76318359375, 24.348201751708984, -2428.62890625),
}
local lunarToggle = false
LunarVolcanoSection:NewToggle("Lunar Island Explore", "Teleport repeatedly to UUID.Body parts, then move to next position", function(state)
    lunarToggle = state
end)

task.spawn(function()
    while true do
        if lunarToggle then
            for _, pos in ipairs(lunarPositions) do
                if not lunarToggle then break end

                local folder = islandsFolder:FindFirstChild("Lunar Islands") or (explorerFolder and explorerFolder:FindFirstChild("Lunar Islands"))
                if not folder then warn("Lunar Islands folder not found") break end

                local bodies = getBodiesForIsland(folder, exclusions)
                if #bodies > 0 then
                    for _, body in ipairs(bodies) do
                        if not lunarToggle then break end
                        while lunarToggle and body:IsDescendantOf(workspace) do
                            hrp.CFrame = CFrame.new(body.Position + Vector3.new(0,5,0))
                            task.wait(0.05)
                        end
                    end
                else
                    hrp.CFrame = CFrame.new(pos + Vector3.new(0,5,0))
                    task.wait(15)
                end
            end
        else
            task.wait(0.5)
        end
    end
end)

-- === Volcano Island Positions & Toggle ===
local volcanoPositions = {
    Vector3.new(2964.748291015625, 108.94522857666016, -7078.3603515625),
    Vector3.new(4134.52197265625, 27.04894256591797, -6894.68603515625),
    Vector3.new(4757.5205078125, 26.138153076171875, -7939.00634765625),
    Vector3.new(3487.487548828125, 20.9999942779541, -8586.859375),
}
local volcanoToggle = false
LunarVolcanoSection:NewToggle("Volcano Island Explore", "Teleport repeatedly to UUID.Body parts, then move to next position", function(state)
    volcanoToggle = state
end)

task.spawn(function()
    while true do
        if volcanoToggle then
            for _, pos in ipairs(volcanoPositions) do
                if not volcanoToggle then break end

                local folder = islandsFolder:FindFirstChild("Volcano Island") or (explorerFolder and explorerFolder:FindFirstChild("Volcano Island"))
                if not folder then warn("Volcano Island folder not found") break end

                local bodies = getBodiesForIsland(folder, exclusions)
                if #bodies > 0 then
                    for _, body in ipairs(bodies) do
                        if not volcanoToggle then break end
                        while volcanoToggle and body:IsDescendantOf(workspace) do
                            hrp.CFrame = CFrame.new(body.Position + Vector3.new(0,5,0))
                            task.wait(0.05)
                        end
                    end
                else
                    hrp.CFrame = CFrame.new(pos + Vector3.new(0,5,0))
                    task.wait(15)
                end
            end
        else
            task.wait(0.5)
        end
    end
end)
