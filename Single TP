local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")

local checkpointsFolder = workspace.Islands["Training Island"]["Outdoor Arena"].DynamicArena
    ._LAYOUT.CheckpointActivity.Routes.Checkpoints

-- Helper: check if string is UUID-like (basic pattern)
local function isUUID(str)
    -- Simple pattern: 8-4-4-4-12 hex chars
    return str:match("^%x%x%x%x%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%-%x%x%x%x%x%x%x%x%x%x%x%x$") ~= nil
end

-- Find all NPC models with UUID names in Training Island
local function getAllUUIDModels()
    local islandFolder = workspace.Islands["Training Island"]
    local npcs = {}
    for _, child in ipairs(islandFolder:GetChildren()) do
        if child:IsA("Model") and isUUID(child.Name) then
            -- Ensure PrimaryPart set
            if not child.PrimaryPart then
                local root = child:FindFirstChild("HumanoidRootPart") or child:FindFirstChildWhichIsA("BasePart")
                if root then
                    child.PrimaryPart = root
                end
            end
            if child.PrimaryPart then
                table.insert(npcs, child)
            end
        end
    end
    return npcs
end

-- Create GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportToggleGui"
screenGui.Parent = PlayerGui
screenGui.ResetOnSpawn = false

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 140, 0, 50)
button.Position = UDim2.new(0, 20, 0, 20)
button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
button.TextColor3 = Color3.new(1, 1, 1)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 24
button.Text = "Start Teleport"
button.Parent = screenGui

local running = false
local teleportTask

local order = {"1", "2", "3", "4"}

local function teleportAllToCheckpoint(checkpointName, npcs)
    local checkpoint = checkpointsFolder:FindFirstChild(checkpointName)
    if not checkpoint or not checkpoint:IsA("BasePart") then
        warn("Checkpoint '" .. checkpointName .. "' not found.")
        return
    end

    -- Teleport player with offset
    HRP.CFrame = checkpoint.CFrame + Vector3.new(2, 3, 0)

    -- Teleport all NPC models with offset
    for i, npcModel in ipairs(npcs) do
        if npcModel and npcModel.PrimaryPart then
            -- Slight offset per NPC to avoid stacking (spread on X axis)
            local offsetX = -2 - (i * 3)
            npcModel:SetPrimaryPartCFrame(checkpoint.CFrame + Vector3.new(offsetX, 3, 0))
        end
    end
    print("Teleported player +", #npcs, "NPCs to checkpoint:", checkpointName)
end

local function startTeleportLoop()
    teleportTask = task.spawn(function()
        while running do
            local npcs = getAllUUIDModels()  -- refresh NPC list each loop in case of changes
            for i, checkpointName in ipairs(order) do
                if not running then break end
                teleportAllToCheckpoint(checkpointName, npcs)
                if not running then break end

                if i == 1 then
                    task.wait(0.9)
                elseif i == 3 then
                    task.wait(1)
                elseif i == 4 then
                    task.wait(1)
                else
                    task.wait(0.6)
                end
            end
        end
    end)
end

button.MouseButton1Click:Connect(function()
    if running then
        running = false
        button.Text = "Start Teleport"
        print("Teleport loop stopped.")
    else
        running = true
        button.Text = "Stop Teleport"
        print("Teleport loop started.")
        startTeleportLoop()
    end
end)
