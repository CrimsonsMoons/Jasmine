-- === GUI Library Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("All Islands Teleport", "DarkTheme")

-- === Tabs ===
local TeleportTab = Window:NewTab("Main")
local TeleportSection = TeleportTab:NewSection("Teleport Controls")

local TravelTab = Window:NewTab("Island Travel")
local TravelSection = TravelTab:NewSection("Quick TP Buttons")

local OresTab = Window:NewTab("Ores")
local OresSection = OresTab:NewSection("Universal Ore Teleport")

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local islandsFolder = workspace:WaitForChild("Islands")

-- === Island Teleport Configuration ===
local islandConfigs = {
    ["Mainland"] = {},
    ["Forest Island"] = {},
    ["Mountain Island"] = {},
    ["Lunar Islands"] = {},
    ["Royal Island"] = {},
    ["Blizzard Island"] = {},
    ["Jungle Island"] = {},
    ["Volcano Island"] = {},
    ["Desert Island"] = {},
}

-- === Exclusions for all islands ===
for _, config in pairs(islandConfigs) do
    config["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true
    config["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true
    config["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true
    config["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true
    config["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true
    config["Horse"] = true
    config["Travel Boat"] = true
end

-- === Teleport Toggles ===
local teleportToggles = {}

for islandName, excludedIds in pairs(islandConfigs) do
    teleportToggles[islandName] = false

    TeleportSection:NewToggle("Teleport " .. islandName, "Teleport to " .. islandName .. " (excluding specific parts)", function(state)
        teleportToggles[islandName] = state
    end)

    task.spawn(function()
        local folder = islandsFolder:FindFirstChild(islandName)
        if not folder then
            warn("Island not found: " .. islandName)
            return
        end

        while true do
            if teleportToggles[islandName] then
                for _, model in ipairs(folder:GetChildren()) do
                    if not teleportToggles[islandName] then break end
                    if excludedIds[model.Name] then continue end

                    local body = model:FindFirstChild("Body")
                    if body and body:IsA("BasePart") then
                        while teleportToggles[islandName] and body:IsDescendantOf(workspace) do
                            hrp.CFrame = CFrame.new(body.Position + Vector3.new(0, 5, 0))
                            task.wait(0.05)
                        end
                    end

                    task.wait(0.1)
                end
            else
                task.wait(0.5)
            end
        end
    end)
end

-- === Island Travel Buttons ===
local function createTravelButton(islandName)
    TravelSection:NewButton("Travel to " .. islandName, "Uses remote to travel instantly", function()
        local args = {
            [1] = "\1",
            [2] = "Travel",
            [3] = islandName,
            [4] = 1
        }

        local comm = game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9)
        local funcFolder = comm:WaitForChild("Functions", 9e9)
        local remote = funcFolder:GetChildren()[2]

        remote:FireServer(unpack(args))
    end)
end

for islandName, _ in pairs(islandConfigs) do
    createTravelButton(islandName)
end

-- === Universal Ore Teleport ===
local universalOreTP = false

OresSection:NewToggle("Teleport All Ores (All Islands)", "Teleports to every ore in 'Meshes/Rocks 2' and 'Rocks' folders across all islands", function(state)
    universalOreTP = state
end)

task.spawn(function()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")

    local islands = workspace:WaitForChild("Islands")

    while true do
        if universalOreTP then
            for _, island in ipairs(islands:GetChildren()) do
                for _, instance in ipairs(island:GetDescendants()) do
                    if (instance.Name == "Meshes/Rocks 2" or instance.Name == "Rocks") and instance:IsA("Folder") then
                        for _, ore in ipairs(instance:GetChildren()) do
                            if not universalOreTP then break end

                            local part = ore:IsA("BasePart") and ore
                                or (ore:IsA("Model") and ore:FindFirstChild("Main"))

                            if part and part:IsA("BasePart") then
                                hrp.CFrame = CFrame.new(part.Position + Vector3.new(0, 5, 0))

                                while universalOreTP and part:IsDescendantOf(workspace) do
                                    task.wait(0.1)
                                end
                            end
                        end
                    end
                end
            end
        else
            task.wait(0.5)
        end
    end
end)
