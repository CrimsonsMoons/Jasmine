local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- Create GUI
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 100)
frame.Position = UDim2.new(0.5, -100, 0.5, -50)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BorderSizePixel = 0
frame.Parent = screenGui

-- Dragging support (mouse + touch)
local dragging
local dragInput
local dragStart
local startPos

local function update(input)
	local delta = input.Position - dragStart
	frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
end

frame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
		dragging = true
		dragStart = input.Position
		startPos = frame.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

frame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if input == dragInput and dragging then
		update(input)
	end
end)

-- Toggle button
local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 180, 0, 40)
toggleButton.Position = UDim2.new(0, 10, 0, 30)
toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.TextSize = 18
toggleButton.Text = "Teleport: OFF"
toggleButton.Parent = frame

-- Label
local label = Instance.new("TextLabel")
label.Size = UDim2.new(1, 0, 0, 30)
label.Position = UDim2.new(0, 0, 0, 0)
label.BackgroundTransparency = 1
label.Text = "Teleport Toggle"
label.TextColor3 = Color3.new(1, 1, 1)
label.TextSize = 20
label.Font = Enum.Font.SourceSansBold
label.Parent = frame

-- Logic
local isToggled = false
local teleporting = false
local activeRocksPart = nil

local function findFirstRocksPart()
	local mainland = workspace:FindFirstChild("Islands") and workspace.Islands:FindFirstChild("Mainland")
	if not mainland then return nil end

	for _, child in pairs(mainland:GetChildren()) do
		if child:IsA("Folder") and child:FindFirstChild("Rocks") and child.Rocks:IsA("BasePart") then
			return child.Rocks
		end
	end
	return nil
end

local function startTeleportLoop()
	teleporting = true

	while teleporting and activeRocksPart and activeRocksPart.Parent do
		local char = player.Character or player.CharacterAdded:Wait()
		local hrp = char:FindFirstChild("HumanoidRootPart")
		if hrp and activeRocksPart then
			hrp.CFrame = activeRocksPart.CFrame + Vector3.new(0, 5, 0)
		end
		wait(3)
	end

	-- Stop if target is gone
	toggleButton.Text = "Teleport: OFF"
	isToggled = false
	teleporting = false
	activeRocksPart = nil
end

toggleButton.MouseButton1Click:Connect(function()
	isToggled = not isToggled
	toggleButton.Text = isToggled and "Teleport: ON" or "Teleport: OFF"

	if isToggled then
		activeRocksPart = findFirstRocksPart()
		if activeRocksPart then
			startTeleportLoop()
		else
			warn("No Rocks part found.")
			toggleButton.Text = "Teleport: OFF"
			isToggled = false
		end
	else
		teleporting = false
	end
end)
