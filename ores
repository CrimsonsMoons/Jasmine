local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

-- GUI Frame
local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 100)
frame.Position = UDim2.new(0.5, -100, 0.5, -50)
frame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
frame.BorderSizePixel = 0
frame.Parent = screenGui

-- Title
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.BackgroundTransparency = 1
title.Text = "Teleport Toggle"
title.TextColor3 = Color3.new(1, 1, 1)
title.TextSize = 20
title.Font = Enum.Font.SourceSansBold
title.Parent = frame

-- Toggle Button
local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 180, 0, 40)
button.Position = UDim2.new(0, 10, 0, 50)
button.BackgroundColor3 = Color3.fromRGB(70, 70, 70)
button.TextColor3 = Color3.new(1, 1, 1)
button.TextSize = 18
button.Font = Enum.Font.SourceSans
button.Text = "Teleport: OFF"
button.Parent = frame

-- Make frame draggable
local dragging, dragInput, dragStart, startPos = false, nil, nil, nil

frame.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = frame.Position

		input.Changed:Connect(function()
			if input.UserInputState == Enum.UserInputState.End then
				dragging = false
			end
		end)
	end
end)

frame.InputChanged:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseMovement then
		dragInput = input
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if dragging and input == dragInput then
		local delta = input.Position - dragStart
		frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

-- Teleport Logic
local isToggled = false
local teleporting = false

local function getAllValidRocksParts()
	local parts = {}
	local islands = workspace:FindFirstChild("Islands")
	local mainland = islands and islands:FindFirstChild("Mainland")
	if not mainland then return parts end

	for _, folder in ipairs(mainland:GetChildren()) do
		if folder:IsA("Folder") then
			local rocks = folder:FindFirstChild("Rocks")
			if rocks and rocks:IsA("BasePart") then
				table.insert(parts, rocks)
			end
		end
	end

	return parts
end

local function startTeleporting()
	print("Starting teleporting loop...")
	teleporting = true

	while teleporting do
		local rocksParts = getAllValidRocksParts()
		print("Found", #rocksParts, "Rocks parts")
		if #rocksParts == 0 then
			warn("No valid Rocks parts found.")
			break
		end

		for _, part in ipairs(rocksParts) do
			if not teleporting then break end
			if part and part.Parent then
				local character = player.Character or player.CharacterAdded:Wait()
				local hrp = character:FindFirstChild("HumanoidRootPart")
				if hrp then
					print("Teleporting to:", part:GetFullName())
					hrp.CFrame = part.CFrame + Vector3.new(0, 5, 0)
				end
				wait(3)
			end
		end
	end

	-- Reset
	teleporting = false
	isToggled = false
	button.Text = "Teleport: OFF"
end

-- Button click logic
button.MouseButton1Click:Connect(function()
	print("Button clicked. isToggled =", not isToggled)
	isToggled = not isToggled
	button.Text = isToggled and "Teleport: ON" or "Teleport: OFF"

	if isToggled then
		startTeleporting()
	else
		teleporting = false
	end
end)
