----- === GUI Library Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("All Islands Teleport", "DarkTheme")

-- === Tabs ===
local TeleportTab = Window:NewTab("Main")
local TeleportSection = TeleportTab:NewSection("Teleport Controls")

local TravelTab = Window:NewTab("Island Travel")
local TravelSection = TravelTab:NewSection("Quick TP Buttons")

local TrainTab = Window:NewTab("Train")
local TrainSection = TrainTab:NewSection("Training Features")

local AutoTab = Window:NewTab("Auto")
local AutoSection = AutoTab:NewSection("Automation")

local ShopTab = Window:NewTab("Shop")
local ShopSection = ShopTab:NewSection("Shop Items")

local LunarVolcanoTab = Window:NewTab("Lunar/Volcano")
local LunarVolcanoSection = LunarVolcanoTab:NewSection("Special Teleports & Lava")

-- === Services / State ===
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")
local player = Players.LocalPlayer

local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

local islandsFolder = workspace:WaitForChild("Islands")
local explorerFolder = workspace:FindFirstChild("Explorer")

-- Refresh HRP on respawn
player.CharacterAdded:Connect(function(newChar)
    character = newChar
    hrp = character:WaitForChild("HumanoidRootPart")
end)

-- === Island Configuration ===
local islandConfigs = {
    ["Mainland"] = {},
    ["Forest Island"] = {},
    ["Mountain Island"] = {},
    ["Lunar Islands"] = {},
    ["Royal Island"] = {},
    ["Blizzard Island"] = {},
    ["Jungle Island"] = {},
    ["Volcano Island"] = {},
    ["Desert Island"] = {},
    ["Glacier Island"] = {},
}

-- === Universal Exclusions ===
local exclusions = {
    ["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
    ["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true,
    ["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true,
    ["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true,
    ["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true,
    ["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true,
    ["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true,
    ["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true,
    ["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true,
    ["Horse"] = true,
    ["Travel Boat"] = true,
    ["c21e5cba-8957-4d65-9e54-1aaa2411a71c"] = true,
}

-- === Helpers ===
local function isAlive()
    return character and hrp and hrp.Parent
end

-- Get all valid Body parts across required locations
local function getAllBodies(islandName)
    local list = {}

    -- Workspace direct children
    for _, model in ipairs(workspace:GetChildren()) do
        if not exclusions[model.Name] then
            local body = model:FindFirstChild("Body")
            if body and body:IsA("BasePart") then
                table.insert(list, body)
            end
        end
    end

    -- Islands/<islandName>
    local folder1 = islandsFolder:FindFirstChild(islandName)
    if folder1 then
        for _, model in ipairs(folder1:GetChildren()) do
            if not exclusions[model.Name] then
                local body = model:FindFirstChild("Body")
                if body and body:IsA("BasePart") then
                    table.insert(list, body)
                end
            end
        end
    end

    -- Explorer/<islandName>
    if explorerFolder then
        local folder2 = explorerFolder:FindFirstChild(islandName)
        if folder2 then
            for _, model in ipairs(folder2:GetChildren()) do
                if not exclusions[model.Name] then
                    local body = model:FindFirstChild("Body")
                    if body and body:IsA("BasePart") then
                        table.insert(list, body)
                    end
                end
            end
        end
    end

    return list
end

-- Gentle teleport (throttled)
local function tpTo(vec3)
    if not isAlive() then return end
    -- small vertical offset; use CFrame.new to avoid physics impulses
    hrp.CFrame = CFrame.new(vec3 + Vector3.new(0, 5, 0))
end

-- === Travel Buttons (server remote) ===
for islandName in pairs(islandConfigs) do
    TravelSection:NewButton("Travel to " .. islandName, "Use teleport remote", function()
        local ok, err = pcall(function()
            local args = {"\1", "Travel", islandName, 1}
            ReplicatedStorage:WaitForChild("Communication", 9e9)
                :WaitForChild("Functions", 9e9):GetChildren()[2]:FireServer(unpack(args))
        end)
        if not ok then
            warn("[Travel Remote] Failed for " .. islandName .. ": " .. tostring(err))
        end
    end)
end

-- === MAIN TAB: Teleport toggles (managed by ONE worker) ===
local teleportToggles = {}  -- { [islandName] = boolean }
for islandName in pairs(islandConfigs) do
    teleportToggles[islandName] = false
    TeleportSection:NewToggle("Teleport " .. islandName, "Teleport to " .. islandName, function(state)
        teleportToggles[islandName] = state
    end)
end

-- SINGLE worker for main teleports
local mainWorkerRunning = true
task.spawn(function()
    -- Cycle islands at a safe cadence
    local islandNames = {}
    for name in pairs(islandConfigs) do table.insert(islandNames, name) end

    local PER_TELEPORT_WAIT = 0.25     -- slower than 0.05 to avoid anticheat
    local BETWEEN_ISLANDS_WAIT = 0.05  -- micro-pause between islands
    local IDLE_WAIT = 0.3              -- when nothing is toggled

    while mainWorkerRunning do
        local anyActive = false

        for _, islandName in ipairs(islandNames) do
            if teleportToggles[islandName] then
                anyActive = true
                -- get current bodies for this island once per cycle
                local bodies = getAllBodies(islandName)
                -- teleport ONCE per body per cycle (no nested while)
                for _, body in ipairs(bodies) do
                    if not teleportToggles[islandName] then break end
                    if body:IsDescendantOf(workspace) and isAlive() then
                        tpTo(body.Position)
                        task.wait(PER_TELEPORT_WAIT)
                    end
                end
                task.wait(BETWEEN_ISLANDS_WAIT)
            end
        end

        if not anyActive then
            task.wait(IDLE_WAIT)
        end
    end
end)

-- === Special islands positions ===
local positionsByIsland = {
    ["Forest Island"] = {
        Vector3.new(-7839, 96, 4180),
        Vector3.new(-7945, 91, 3557),
        Vector3.new(-7878, 135, 2901),
    },
    ["Mountain Island"] = {
        Vector3.new(-6715, 276, 10),
        Vector3.new(-6102, 349, -242),
        Vector3.new(-6962, 304, -778),
    },
    ["Lunar Islands"] = {
        Vector3.new(-3097.42, 17.63, -3681.29),
        Vector3.new(-2759.49, 6.74, -2589.20),
        Vector3.new(-2207.14, 139.06, -1223.94),
        Vector3.new(-3266.90, 15.43, -1436.56),
        Vector3.new(-3357.76, 24.34, -2428.62),
    },
    ["Royal Island"] = {
        Vector3.new(253.7, 94, -5399),
        Vector3.new(-372, 156, -6136),
        Vector3.new(617, 6.8, -6002),
    },
    ["Blizzard Island"] = {
        Vector3.new(-428, 138, -3859),
        Vector3.new(-937, 14, -3897),
        Vector3.new(244, 15, -3563),
    },
    ["Jungle Island"] = {
        Vector3.new(3396, 15, 1080),
        Vector3.new(3616, 65, 2149),
        Vector3.new(3763, 16, 3143),
    },
    ["Volcano Island"] = {
        Vector3.new(2964.74, 108.94, -7078.36),
        Vector3.new(4134.52, 27.04, -6894.68),
        Vector3.new(4757.52, 26.13, -7939.00),
        Vector3.new(3487.48, 20.99, -8586.85),
    },
    ["Desert Island"] = {
        Vector3.new(1050, 15, 4095),
        Vector3.new(156, 31, 4065),
        Vector3.new(-517, 38, 4221),
    },
    ["Glacier Island"] = {
        Vector3.new(2718, 115, -74),
        Vector3.new(2438, 196, -763),
        Vector3.new(3102, 147, -911),
        Vector3.new(3125, 82, -74),
    },
}

-- === LUNAR/VOLCANO TAB: Explore toggles (managed by ONE worker) ===
local exploreToggles = {}        -- { [islandName] = boolean }
local exploreIndex = {}          -- rotating index per island for position stepping

for islandName in pairs(positionsByIsland) do
    exploreToggles[islandName] = false
    exploreIndex[islandName] = 1
    LunarVolcanoSection:NewToggle(islandName .. " Explore", "Teleport to UUID.Body parts, then next position", function(state)
        exploreToggles[islandName] = state
    end)
end

local exploreWorkerRunning = true
task.spawn(function()
    local PER_BODY_WAIT = 0.25        -- safe body-teleport rate
    local BETWEEN_ISLANDS_WAIT = 0.05
    local NO_BODIES_WAIT = 0.8        -- brief scan delay when none
    local POSITION_DWELL = 2.0        -- time to linger at a position when no bodies (shorter than 11.5 to avoid idle flags)
    local IDLE_WAIT = 0.3

    local islandNames = {}
    for name in pairs(positionsByIsland) do table.insert(islandNames, name) end

    while exploreWorkerRunning do
        local anyActive = false

        for _, islandName in ipairs(islandNames) do
            if exploreToggles[islandName] then
                anyActive = true

                -- First, try Bodies
                local bodies = getAllBodies(islandName)
                if #bodies > 0 then
                    for _, body in ipairs(bodies) do
                        if not exploreToggles[islandName] then break end
                        if body:IsDescendantOf(workspace) and isAlive() then
                            tpTo(body.Position)
                            task.wait(PER_BODY_WAIT)
                        end
                    end
                else
                    -- No bodies -> step through configured positions in a round-robin
                    local positions = positionsByIsland[islandName]
                    if positions and #positions > 0 and isAlive() then
                        local idx = exploreIndex[islandName]
                        if idx > #positions then idx = 1 end
                        local pos = positions[idx]
                        exploreIndex[islandName] = idx + 1
                        tpTo(pos)
                        task.wait(POSITION_DWELL)
                    else
                        task.wait(NO_BODIES_WAIT)
                    end
                end

                task.wait(BETWEEN_ISLANDS_WAIT)
            end
        end

        if not anyActive then
            task.wait(IDLE_WAIT)
        end
    end
end)

-- === Volcano Lava Removal (single task, guarded) ===
local removeLavaEnabled = false
local lavaThread -- thread handle

local function startLavaRemoval()
    if lavaThread then return end   -- already running
    lavaThread = task.spawn(function()
        local INTERVAL = 60
        while removeLavaEnabled do
            local lavaFolder = islandsFolder:FindFirstChild("Volcano Island")
            lavaFolder = lavaFolder and lavaFolder:FindFirstChild("LavaParts")
            if lavaFolder then
                pcall(function()
                    lavaFolder:Destroy()
                end)
            end
            task.wait(INTERVAL)
        end
        lavaThread = nil
    end)
end

LunarVolcanoSection:NewToggle("Remove Volcano Lava", "Deletes Volcano Island LavaParts every 60 seconds", function(state)
    removeLavaEnabled = state
    if state then
        startLavaRemoval()
    end
end)

-- (Optional) Cleanup UI button (helps stop workers if you close UI)
local function stopAllWorkers()
    mainWorkerRunning = false
    exploreWorkerRunning = false
    removeLavaEnabled = false
end

-- Add a tiny control to Shop tab for clean exit (optional)
ShopSection:NewButton("Stop All Workers", "Stops background loops safely", function()
    stopAllWorkers()
end)
