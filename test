------ === GUI Library Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("All Islands Teleport", "DarkTheme")

-- === Tabs ===
local TeleportTab = Window:NewTab("Main")
local TeleportSection = TeleportTab:NewSection("Teleport Controls")

local TravelTab = Window:NewTab("Island Travel")
local TravelSection = TravelTab:NewSection("Quick TP Buttons")

local TrainTab = Window:NewTab("Train")
local TrainSection = TrainTab:NewSection("Training Features")

local AutoTab = Window:NewTab("Auto")
local AutoSection = AutoTab:NewSection("Automation")

local ShopTab = Window:NewTab("Shop")
local ShopSection = ShopTab:NewSection("Shop Items")

local LunarVolcanoTab = Window:NewTab("Lunar/Volcano")
local LunarVolcanoSection = LunarVolcanoTab:NewSection("Special Teleports & Lava")

-- === Initialization ===
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local islandsFolder = workspace:WaitForChild("Islands")
local explorerFolder = workspace:FindFirstChild("Explorer")

-- Reconnect HRP on respawn
local function setupCharacter(newChar)
    character = newChar
    hrp = character:WaitForChild("HumanoidRootPart")
end
player.CharacterAdded:Connect(setupCharacter)

-- === Island Configuration ===
local islandConfigs = {
    ["Mainland"] = {},
    ["Forest Island"] = {},
    ["Mountain Island"] = {},
    ["Lunar Islands"] = {},
    ["Royal Island"] = {},
    ["Blizzard Island"] = {},
    ["Jungle Island"] = {},
    ["Volcano Island"] = {},
    ["Desert Island"] = {},
    ["Glacier Island"] = {},
}

-- === Universal Exclusions ===
for _, config in pairs(islandConfigs) do
    config["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true
    config["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true
    config["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true
    config["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true
    config["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true
    config["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true
    config["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true
    config["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true
    config["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true
    config["Horse"] = true
    config["Travel Boat"] = true
    config["c21e5cba-8957-4d65-9e54-1aaa2411a71c"] = true
end

-- === Teleport Toggles for Islands in Main Tab ===
local teleportToggles = {}
for islandName, excludedIds in pairs(islandConfigs) do
    teleportToggles[islandName] = false

    TeleportSection:NewToggle("Teleport " .. islandName, "Teleport to " .. islandName, function(state)
        teleportToggles[islandName] = state
    end)

    task.spawn(function()
        while true do
            if teleportToggles[islandName] then
                local folder = islandsFolder:FindFirstChild(islandName) or (explorerFolder and explorerFolder:FindFirstChild(islandName))
                if not folder then task.wait(1) continue end
                for _, model in ipairs(folder:GetChildren()) do
                    if not teleportToggles[islandName] then break end
                    if excludedIds[model.Name] then continue end
                    local body = model:FindFirstChild("Body")
                    if body and body:IsA("BasePart") then
                        while teleportToggles[islandName] and body:IsDescendantOf(workspace) do
                            hrp.CFrame = CFrame.new(body.Position + Vector3.new(0,5,0))
                            task.wait(0.05)
                        end
                    end
                    task.wait(0.1)
                end
            else
                task.wait(0.5)
            end
        end
    end)
end

-- === Travel Buttons ===
for islandName in pairs(islandConfigs) do
    TravelSection:NewButton("Travel to " .. islandName, "Use teleport remote", function()
        local args = {"\1", "Travel", islandName, 1}
        game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9)
            :WaitForChild("Functions", 9e9):GetChildren()[2]:FireServer(unpack(args))
    end)
end

-- === Positions for Special Islands ===
local positionsByIsland = {
    ["Forest Island"] = {
        Vector3.new(-4500, 50, -5000),
        Vector3.new(-4600, 55, -5100),
    },
    ["Mountain Island"] = {
        Vector3.new(-4500, 50, -5000),
        Vector3.new(-4600, 55, -5100),
    },
    ["Lunar Islands"] = {
        Vector3.new(-3097.42, 17.63, -3681.29),
        Vector3.new(-2759.49, 6.74, -2589.20),
        Vector3.new(-2207.14, 139.06, -1223.94),
        Vector3.new(-3266.90, 15.43, -1436.56),
        Vector3.new(-3357.76, 24.34, -2428.62),
    },
    ["Royal Island"] = {},
    ["Blizzard Island"] = {
        Vector3.new(-4500, 50, -5000),
        Vector3.new(-4600, 55, -5100),
    },
    ["Jungle Island"] = {},
    ["Volcano Island"] = {
        Vector3.new(2964.74, 108.94, -7078.36),
        Vector3.new(4134.52, 27.04, -6894.68),
        Vector3.new(4757.52, 26.13, -7939.00),
        Vector3.new(3487.48, 20.99, -8586.85),
    },
    ["Desert Island"] = {},
    ["Glacier Island"] = {},
}

local islandToggles = {}
local exclusions = islandConfigs["Mainland"]

for islandName, positions in pairs(positionsByIsland) do
    islandToggles[islandName] = false
    LunarVolcanoSection:NewToggle(islandName .. " Explore", "Teleport to UUID.Body parts, then next position", function(state)
        islandToggles[islandName] = state
    end)

    task.spawn(function()
        while true do
            if islandToggles[islandName] then
                local folder = islandsFolder:FindFirstChild(islandName) or (explorerFolder and explorerFolder:FindFirstChild(islandName))
                if not folder then task.wait(1) continue end

                for _, pos in ipairs(positions) do
                    if not islandToggles[islandName] then break end

                    local hasBodies = false
                    for _, model in ipairs(folder:GetChildren()) do
                        if not exclusions[model.Name] then
                            local body = model:FindFirstChild("Body")
                            if body and body:IsA("BasePart") and body:IsDescendantOf(workspace) then
                                hasBodies = true
                                break
                            end
                        end
                    end

                    if hasBodies then
                        for _, model in ipairs(folder:GetChildren()) do
                            if not islandToggles[islandName] then break end
                            if not exclusions[model.Name] then
                                local body = model:FindFirstChild("Body")
                                if body and body:IsA("BasePart") and body:IsDescendantOf(workspace) then
                                    while islandToggles[islandName] and body:IsDescendantOf(workspace) do
                                        hrp.CFrame = CFrame.new(body.Position + Vector3.new(0,5,0))
                                        task.wait(0.05)
                                    end
                                end
                            end
                        end
                    else
                        hrp.CFrame = CFrame.new(pos + Vector3.new(0,5,0))
                        task.wait(11.5)
                    end
                end
            else
                task.wait(0.5)
            end
        end
    end)
end

-- === Volcano Lava Removal Toggle ===
local removeLavaEnabled = false
LunarVolcanoSection:NewToggle("Remove Volcano Lava", "Deletes Volcano Island LavaParts every 60 seconds", function(state)
    removeLavaEnabled = state
    if state then
        task.spawn(function()
            while removeLavaEnabled do
                local lavaFolder = workspace:FindFirstChild("Islands")
                    and workspace.Islands:FindFirstChild("Volcano Island")
                    and workspace.Islands["Volcano Island"]:FindFirstChild("LavaParts")
                if lavaFolder then
                    lavaFolder:Destroy()
                end
                task.wait(60)
            end
        end)
    end
end)
