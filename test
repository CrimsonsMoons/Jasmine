-- === GUI Library Setup ===
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()
local Window = Library.CreateLib("All Islands Teleport", "DarkTheme")

-- === Tabs ===
local TeleportTab = Window:NewTab("Main")
local TeleportSection = TeleportTab:NewSection("Teleport Controls")

local TravelTab = Window:NewTab("Island Travel")
local TravelSection = TravelTab:NewSection("Quick TP Buttons")

local TrainTab = Window:NewTab("Train")
local TrainSection = TrainTab:NewSection("Training Features")

local AutoTab = Window:NewTab("Auto")
local AutoSection = AutoTab:NewSection("Automation")

local ShopTab = Window:NewTab("Shop")
local ShopSection = ShopTab:NewSection("Shop Items")

local LunarVolcanoTab = Window:NewTab("Lunar/Volcano")
local LunarVolcanoSection = LunarVolcanoTab:NewSection("Special Teleports & Lava")

-- === Initialization ===
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")
local islandsFolder = workspace:WaitForChild("Islands")
local explorerFolder = workspace:FindFirstChild("Explorer")

-- Reconnect HRP on respawn
local function setupCharacter(newChar)
    character = newChar
    hrp = character:WaitForChild("HumanoidRootPart")
end
player.CharacterAdded:Connect(setupCharacter)

-- === Exclusions ===
local exclusions = {
    ["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
    ["{c5769905-aecf-4d7a-ada9-064802b0cae9}"] = true,
    ["{d2227f02-c482-4911-b201-7e842b31c47c}"] = true,
    ["{6b019e60-21c6-4536-9a06-4cbfee80d88f}"] = true,
    ["{12916ad6-7fd9-46d5-8bc1-e69671249721}"] = true,
    ["{2c0549c7-f2d0-4828-bc2a-6d484e792cdd}"] = true,
    ["{de31ac95-029b-4c26-b9f8-4b61faed7335}"] = true,
    ["{fd489389-537f-40e1-bd1a-c048522d23bc}"] = true,
    ["{f1f04024-ba69-4d0f-9fee-4f93758c1bfc}"] = true,
    ["Horse"] = true,
    ["Travel Boat"] = true,
    ["c21e5cba-8957-4d65-9e54-1aaa2411a71c"] = true,
}

-- === Lunar/Volcano/Blizzard Positions ===
local islandPositions = {
    ["Lunar Islands"] = {
        Vector3.new(-3097,17,-3681),
        Vector3.new(-2759,6,-2589),
        Vector3.new(-2207,139,-1223),
        Vector3.new(-3266,15,-1436),
        Vector3.new(-3357,24,-2428),
    },
    ["Volcano Island"] = {
        Vector3.new(2964,108,-7078),
        Vector3.new(4134,27,-6894),
        Vector3.new(4757,26,-7939),
        Vector3.new(3487,20,-8586),
    },
    ["Blizzard Island"] = {
        Vector3.new(-5000,20,-2000),
        Vector3.new(-5200,15,-2100),
        Vector3.new(-5400,25,-2300),
    },
}

-- === Generic teleport function ===
local function teleportToBodies(folder, positions, toggleVar)
    task.spawn(function()
        while toggleVar do
            for _, pos in ipairs(positions) do
                if not toggleVar then break end
                local hasBodies = false

                for _, model in ipairs(folder:GetChildren()) do
                    if not exclusions[model.Name] then
                        local body = model:FindFirstChild("Body")
                        if body and body:IsA("BasePart") and body:IsDescendantOf(workspace) then
                            hasBodies = true
                            break
                        end
                    end
                end

                if hasBodies then
                    for _, model in ipairs(folder:GetChildren()) do
                        if not toggleVar then break end
                        if not exclusions[model.Name] then
                            local body = model:FindFirstChild("Body")
                            if body and body:IsA("BasePart") and body:IsDescendantOf(workspace) then
                                while toggleVar and body:IsDescendantOf(workspace) do
                                    hrp.CFrame = CFrame.new(body.Position + Vector3.new(0,5,0))
                                    task.wait(0.05)
                                end
                            end
                        end
                    end
                else
                    hrp.CFrame = CFrame.new(pos + Vector3.new(0,5,0))
                    task.wait(11.5)
                end
            end
            task.wait(0.5)
        end
    end)
end

-- === Create toggles for Lunar/Volcano/Blizzard ===
local islandToggles = {}
for islandName, positions in pairs(islandPositions) do
    islandToggles[islandName] = false
    LunarVolcanoSection:NewToggle(islandName .. " Explore", "Teleport to UUID.Body parts, then next position", function(state)
        islandToggles[islandName] = state
        if state then
            local folder = islandsFolder:FindFirstChild(islandName) or (explorerFolder and explorerFolder:FindFirstChild(islandName))
            if folder then
                teleportToBodies(folder, positions, islandToggles[islandName])
            end
        end
    end)
end

-- === Volcano Lava Removal Toggle ===
local removeLavaEnabled = false
LunarVolcanoSection:NewToggle("Remove Volcano Lava", "Deletes Volcano Island LavaParts every 60 seconds", function(state)
    removeLavaEnabled = state
    if state then
        task.spawn(function()
            while removeLavaEnabled do
                local lavaFolder = islandsFolder:FindFirstChild("Volcano Island")
                    and islandsFolder["Volcano Island"]:FindFirstChild("LavaParts")
                if lavaFolder then
                    lavaFolder:ClearAllChildren()
                end
                task.wait(60)
            end
        end)
    end
end)
