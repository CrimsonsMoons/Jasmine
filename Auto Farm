local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")

local Communication = ReplicatedStorage:WaitForChild("Communication", 9e9)
local Functions = Communication:WaitForChild("Functions", 9e9)
local fireFunction = Functions:GetChildren()[4] -- Verify index

print("Using remote function:", fireFunction.Name)

local ForestIsland = workspace:WaitForChild("Islands", 9e9):WaitForChild("Forest Island", 9e9)

local targetPartNames = {
    ["Rock"] = true,
    ["Rocks"] = true,
    ["Rock 1"] = true,
    ["Rocks 2"] = true,
}

local function findTargetPart(folder)
    for _, descendant in pairs(folder:GetDescendants()) do
        if descendant:IsA("BasePart") and targetPartNames[descendant.Name] then
            return descendant
        end
    end
    return nil
end

while true do
    for _, uuidFolder in pairs(ForestIsland:GetChildren()) do
        if uuidFolder:IsA("Folder") and uuidFolder.Name:match("^%b{}$") then
            local targetPart = findTargetPart(uuidFolder)
            if targetPart then
                local distance = (RootPart.Position - targetPart.Position).Magnitude
                if distance <= 15 then
                    print("Processing UUID:", uuidFolder.Name, "Distance:", distance)
                    local args = {
                        [1] = " ",
                        [2] = "Engage",
                        [3] = uuidFolder
                    }
                    fireFunction:FireServer(unpack(args))
                    task.wait(1) -- wait 1 second before next UUID
                end
            end
        end
    end
    task.wait(2) -- wait 2 seconds before scanning again
end
