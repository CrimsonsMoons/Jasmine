local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local IslandsFolder = Workspace:WaitForChild("Islands", 9e9)
local Communication = ReplicatedStorage:WaitForChild("Communication", 9e9)
local FunctionsFolder = Communication:WaitForChild("Functions", 9e9)
local engageFunction = FunctionsFolder:GetChildren()[4]

local uuidPattern = "%b{}"

local targetPartNames = {
    "Rocks",
    "Rock",
    "Flower",
    "Rocks 2",
    "Bush (1)",
    "Wheat Plane",
    "Rock 1",
    "Leaf",
    "Coconut",
    "Hay",
    "StrawBerries"
}

-- Excluded parts and folders (blacklist)
local excludedPart = Workspace:FindFirstChild("Islands")
    and Workspace.Islands:FindFirstChild("Forest Island")
    and Workspace.Islands["Forest Island"]:FindFirstChild("Enhanced Storage Locker")
    and Workspace.Islands["Forest Island"]["Enhanced Storage Locker"]:FindFirstChild("Bounds")

local excludedFolder = Workspace:FindFirstChild("Islands")
    and Workspace.Islands:FindFirstChild("Forest Island")
    and Workspace.Islands["Forest Island"]:FindFirstChild("Larry")

local function isDescendantOfExcludedFolder(instance)
    return excludedFolder and instance:IsDescendantOf(excludedFolder)
end

local function isTargetName(name, parentName)
    for _, targetName in ipairs(targetPartNames) do
        if name == targetName then
            -- In your original code Log is handled specially,
            -- but you don't have "Log" in your targetPartNames, so skipping that
            return true
        end
    end
    return false
end

local function findTargets(folder)
    local results = {}
    for _, descendant in ipairs(folder:GetDescendants()) do
        if descendant == excludedPart then
            -- Skip excluded part
        elseif isDescendantOfExcludedFolder(descendant) then
            -- Skip everything inside the excluded folder
        elseif descendant:IsA("BasePart") or descendant:IsA("MeshPart") or descendant:IsA("UnionOperation") then
            if descendant:GetAttribute("interactionType") == "CollectableItem" then
                table.insert(results, descendant)
            elseif isTargetName(descendant.Name, descendant.Parent and descendant.Parent.Name or "") then
                table.insert(results, descendant)
            end
        end
    end
    return results
end

local function getHumanoidRootPart()
    local character = LocalPlayer.Character
    if not character then return nil end
    return character:FindFirstChild("HumanoidRootPart")
end

while true do
    local hrp = getHumanoidRootPart()
    if hrp then
        for _, island in ipairs(IslandsFolder:GetChildren()) do
            for _, uuidFolder in ipairs(island:GetChildren()) do
                if uuidFolder.Name:match("^%b{}$") then
                    local success, pivot = pcall(function()
                        return uuidFolder:GetPivot()
                    end)
                    if success and pivot then
                        local distance = (pivot.Position - hrp.Position).Magnitude
                        if distance <= 20 then
                            -- Check if this UUID folder contains valid target parts
                            local targets = findTargets(uuidFolder)
                            if #targets > 0 then
                                local args = {
                                    [1] = " ";
                                    [2] = "Engage";
                                    [3] = uuidFolder;
                                }
                                engageFunction:FireServer(unpack(args))
                            end
                        end
                    end
                end
            end
        end
    else
        task.wait(0.5)
    end
    task.wait(5)  -- loop delay
end
