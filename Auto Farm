-------
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local RootPart = Character:WaitForChild("HumanoidRootPart")

local Communication = ReplicatedStorage:WaitForChild("Communication")
local Functions = Communication:WaitForChild("Functions")
local Remote = Functions:GetChildren()[4]  -- Update index if needed
print("Using remote:", Remote.Name)

local Islands = Workspace:WaitForChild("Islands")
local SEARCH_RADIUS = 30

local function findChildByNameRecursive(parent, targetName)
    for _, child in ipairs(parent:GetChildren()) do
        if child.Name == targetName then
            return child
        end
        if #child:GetChildren() > 0 then
            local found = findChildByNameRecursive(child, targetName)
            if found then
                return found
            end
        end
    end
    return nil
end

local function printDescendants(parent, indent)
    indent = indent or ""
    for _, child in ipairs(parent:GetChildren()) do
        print(indent .. child.Name, child.ClassName)
        printDescendants(child, indent .. "  ")
    end
end

local function hasTargetParts(uuidFolder)
    -- Check direct child "Rocks"
    local rocksPart = uuidFolder:FindFirstChild("Rocks")
    if rocksPart and rocksPart:IsA("BasePart") then
        print("Found direct 'Rocks' in UUID:", uuidFolder.Name)
        return true
    end

    -- Check "Meshes"
    local meshesFolder = uuidFolder:FindFirstChild("Meshes")
    if not meshesFolder then
        print("No 'Meshes' folder in UUID:", uuidFolder.Name)
        return false
    end

    print("'Meshes' folder contents in UUID:", uuidFolder.Name)
    printDescendants(meshesFolder, "  ")

    local rocks2Part = findChildByNameRecursive(meshesFolder, "Rocks 2")
    if rocks2Part and rocks2Part:IsA("BasePart") then
        print("Found 'Rocks 2' inside 'Meshes' in UUID:", uuidFolder.Name)
        return true
    else
        print("No valid 'Rocks 2' BasePart found inside 'Meshes' in UUID:", uuidFolder.Name)
        return false
    end
end

for _, island in ipairs(Islands:GetChildren()) do
    for _, uuidFolder in ipairs(island:GetChildren()) do
        if tostring(uuidFolder.Name):match("^%b{}$") then
            local bodyPart = uuidFolder:FindFirstChild("Body") or uuidFolder:FindFirstChildWhichIsA("BasePart")
            if bodyPart then
                local dist = (bodyPart.Position - RootPart.Position).Magnitude
                if dist <= SEARCH_RADIUS then
                    if hasTargetParts(uuidFolder) then
                        local args = {
                            [1] = uuidFolder.Name,
                            [2] = "Engage",
                            [3] = uuidFolder
                        }
                        print("Firing remote for UUID:", uuidFolder.Name, "Distance:", dist)
                        Remote:FireServer(unpack(args))
                    end
                end
            end
        end
    end
end
