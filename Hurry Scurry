local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer

-- Static list of known UUIDs for NPCs (update as needed)
local uuids = {
    "{60f828f4-a916-4262-842e-7ddc49e07ad9}",
    "{c5769905-aecf-4d7a-ada9-064802b0cae9}",
    "{d2227f02-c482-4911-b201-7e842b31c47c}",
    "{6b019e60-21c6-4536-9a06-4cbfee80d88f}",
    "{12916ad6-7fd9-46d5-8bc1-e69671249721}",
}

local function isUUID(str)
    return tostring(str):match("^%b{}$") ~= nil
end

-- Get all valid NPC models (static + dynamic)
local function getNPCs()
    local folder = workspace:Islands()["Training Island"]
    local npcList = {}

    for _, uuid in ipairs(uuids) do
        local model = folder:FindFirstChild(uuid)
        if model and model:IsA("Model") then
            if not model.PrimaryPart then
                model.PrimaryPart = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
            end
            if model.PrimaryPart then
                table.insert(npcList, model)
            end
        end
    end

    for _, model in ipairs(folder:GetDescendants()) do
        if model:IsA("Model") and isUUID(model.Name) and not table.find(uuids, model.Name) then
            if model:FindFirstChildWhichIsA("Humanoid") then
                if not model.PrimaryPart then
                    model.PrimaryPart = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                end
                if model.PrimaryPart then
                    table.insert(npcList, model)
                end
            end
        end
    end

    return npcList
end

local jumpRunning = false
local jumpTask

local function freezeJumpLoop(npcs)
    if jumpRunning then return end
    jumpRunning = true
    jumpTask = task.spawn(function()
        while jumpRunning do
            -- Freeze player in jump state
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildWhichIsA("Humanoid")
                local hrp = char:FindFirstChild("HumanoidRootPart")
                if humanoid and hrp and humanoid.Health > 0 then
                    humanoid.Jump = true
                    humanoid.PlatformStand = true
                    hrp.Anchored = true
                end
            end

            -- Freeze NPCs in jump state
            for _, npc in ipairs(npcs) do
                if npc and npc.Parent then
                    local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
                    local root = npc.PrimaryPart
                    if humanoid and root and humanoid.Health > 0 then
                        humanoid.Jump = true
                        humanoid.PlatformStand = true
                        root.Anchored = true
                    end
                end
            end

            task.wait(0.1)
        end
    end)
end

local function unfreezeJumpLoop(npcs)
    jumpRunning = false
    if jumpTask then
        task.cancel(jumpTask)
        jumpTask = nil
    end

    -- Unanchor and disable PlatformStand for player
    local char = LocalPlayer.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA("Humanoid")
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if humanoid and hrp then
            humanoid.PlatformStand = false
            hrp.Anchored = false
        end
    end

    -- Unanchor and disable PlatformStand for NPCs
    for _, npc in ipairs(npcs) do
        if npc and npc.Parent then
            local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
            local root = npc.PrimaryPart
            if humanoid and root then
                humanoid.PlatformStand = false
                root.Anchored = false
            end
        end
    end
end

-- Example usage:
local npcs = getNPCs()
freezeJumpLoop(npcs)

-- To stop the freeze jump:
-- unfreezeJumpLoop(npcs)
