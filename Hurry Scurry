local Players = game:GetService("Players")
local player = Players.LocalPlayer

local playerGui = player:WaitForChild("PlayerGui")
print("PlayerGui found:", playerGui) -- debug print

-- Remove any existing GUI with the same name (cleanup)
local existingGui = playerGui:FindFirstChild("TeleportToggleGui")
if existingGui then
    existingGui:Destroy()
end

-- Create ScreenGui and toggle button
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportToggleGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = playerGui

local toggleButton = Instance.new("TextButton")
toggleButton.Size = UDim2.new(0, 200, 0, 50)
toggleButton.Position = UDim2.new(0, 20, 0, 20)
toggleButton.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
toggleButton.TextColor3 = Color3.new(1, 1, 1)
toggleButton.Font = Enum.Font.SourceSansBold
toggleButton.TextSize = 24
toggleButton.Text = "Start Teleport Loop"
toggleButton.Parent = screenGui

-- The rest of your teleport script below --

local trainingIsland = workspace:WaitForChild("Islands"):WaitForChild("Training Island")

local function isUUID(name)
    local count = 0
    for c in name:gmatch(".") do
        if c == "-" then count = count + 1 end
    end
    return count == 4
end

local npcModels = {}
for _, child in ipairs(trainingIsland:GetChildren()) do
    if child:IsA("Model") and isUUID(child.Name) then
        local function assignPrimaryPart(model)
            if model.PrimaryPart then return end
            local commonParts = {"HumanoidRootPart", "Torso", "UpperTorso", "LowerTorso"}
            for _, partName in ipairs(commonParts) do
                local part = model:FindFirstChild(partName)
                if part and part:IsA("BasePart") then
                    model.PrimaryPart = part
                    return
                end
            end
            for _, part in pairs(model:GetChildren()) do
                if part:IsA("BasePart") then
                    model.PrimaryPart = part
                    return
                end
            end
        end

        assignPrimaryPart(child)
        if child.PrimaryPart then
            table.insert(npcModels, child)
        else
            warn("Model "..child.Name.." has no PrimaryPart assigned")
        end
    end
end

local routesFolder = trainingIsland
    :WaitForChild("Outdoor Arena")
    :WaitForChild("DynamicArena")
    :WaitForChild("_LAYOUT")
    :WaitForChild("CheckpointActivity")
    :WaitForChild("Routes")
    :WaitForChild("1")

local function teleportModel(model, targetCFrame)
    if model.PrimaryPart then
        model:SetPrimaryPartCFrame(targetCFrame)
    else
        local originalCFrame = model:GetModelCFrame()
        for _, part in ipairs(model:GetChildren()) do
            if part:IsA("BasePart") then
                part.CFrame = targetCFrame * (part.CFrame - originalCFrame)
            end
        end
    end
end

local playerCharacter = player.Character or player.CharacterAdded:Wait()

local function teleportToCheckpoint(part)
    if part and part:IsA("BasePart") then
        local insideCFrame = part.CFrame
            * CFrame.new(0, -part.Size.Y/2 + 1, 0)
            * CFrame.new(0, 0, 1.5)

        for _, model in ipairs(npcModels) do
            teleportModel(model, insideCFrame)
        end
        if playerCharacter and playerCharacter:FindFirstChild("HumanoidRootPart") then
            local hrp = playerCharacter.HumanoidRootPart
            hrp.CFrame = insideCFrame * CFrame.new(0, 2, 0)  -- 2 studs above inside spot
        end
        print("Teleported inside checkpoint:", part.Name)
    else
        warn("Checkpoint part not found or invalid:", part and part.Name or "nil")
    end
end

local looping = false
local teleportCoroutine

local function startLoop()
    looping = true
    toggleButton.Text = "Stop Teleport Loop"

    teleportCoroutine = coroutine.create(function()
        while looping do
            for i = 1, 6 do
                if not looping then break end

                local checkpoint = routesFolder:FindFirstChild(tostring(i))
                if checkpoint then
                    teleportToCheckpoint(checkpoint)
                    wait(2)
                else
                    warn("Checkpoint "..i.." missing")
                end
            end
        end
    end)

    coroutine.resume(teleportCoroutine)
end

local function stopLoop()
    looping = false
    toggleButton.Text = "Start Teleport Loop"
    if teleportCoroutine and coroutine.status(teleportCoroutine) == "suspended" then
        coroutine.close(teleportCoroutine)
    end
end

toggleButton.MouseButton1Click:Connect(function()
    if looping then
        stopLoop()
    else
        startLoop()
    end
end)
