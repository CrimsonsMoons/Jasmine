-- Load Kavo UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

-- Create window and tabs
local Window = Library.CreateLib("All Islands Teleport", "Midnight")

local TeleportTab = Window:NewTab("Main")
local TeleportSection = TeleportTab:NewSection("Teleport Controls")

local TrainTab = Window:NewTab("Train")
local TrainSection = TrainTab:NewSection("Training Features")

-- Player setup
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local hrp = character:WaitForChild("HumanoidRootPart")

-- Update HRP on respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    character = char
    hrp = character:WaitForChild("HumanoidRootPart")
end)

-- Checkpoints path
local checkpointsFolder = workspace:Islands()["Training Island"]["Outdoor Arena"].DynamicArena._LAYOUT.CheckpointActivity.Routes["1"]

-- Known UUIDs to exclude from teleporting (optional)
local excludedUUIDs = {
    ["{84b93b68-b932-4db8-b765-d1bd9ef8aae9}"] = true,
    ["Horse"] = true,
    ["Travel Boat"] = true,
}

-- Static known UUIDs to prioritize teleporting
local knownUUIDs = {
    "{60f828f4-a916-4262-842e-7ddc49e07ad9}",
    "{c5769905-aecf-4d7a-ada9-064802b0cae9}",
    "{d2227f02-c482-4911-b201-7e842b31c47c}",
    "{6b019e60-21c6-4536-9a06-4cbfee80d88f}",
    "{12916ad6-7fd9-46d5-8bc1-e69671249721}",
}

-- Check if string is a UUID pattern
local function isUUID(str)
    return string.match(str, "^%b{}$") ~= nil
end

-- Get all valid NPC models under Training Island folder for teleport
local function getNPCs()
    local folder = workspace:Islands()["Training Island"]
    local npcList = {}

    -- Add known static UUIDs first
    for _, uuid in ipairs(knownUUIDs) do
        local model = folder:FindFirstChild(uuid)
        if model and model:IsA("Model") and not excludedUUIDs[model.Name] then
            local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
            if root then
                model.PrimaryPart = root
                table.insert(npcList, model)
            end
        end
    end

    -- Scan dynamically for other UUID-named models with Humanoids, exclude known and excluded
    for _, model in ipairs(folder:GetChildren()) do
        if model:IsA("Model") and isUUID(model.Name) and not excludedUUIDs[model.Name] and not table.find(knownUUIDs, model.Name) then
            if model:FindFirstChildWhichIsA("Humanoid") then
                local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                if root then
                    model.PrimaryPart = root
                    table.insert(npcList, model)
                end
            end
        end
    end

    return npcList
end

-- Teleport player and NPCs to a checkpoint
local function teleportToCheckpoint(checkpointName, npcs)
    local checkpoint = checkpointsFolder:FindFirstChild(checkpointName)
    if not checkpoint or not checkpoint:IsA("BasePart") then
        warn("Checkpoint '"..checkpointName.."' not found or invalid.")
        return
    end

    -- Teleport player with a slight offset up and sideways
    if hrp and hrp.Parent then
        hrp.CFrame = checkpoint.CFrame + Vector3.new(2, 3, 0)
    end

    -- Teleport NPCs to slightly opposite offset
    for _, npc in ipairs(npcs) do
        if npc.PrimaryPart and npc.PrimaryPart.Parent then
            npc:SetPrimaryPartCFrame(checkpoint.CFrame + Vector3.new(-2, 3, 0))
        end
    end
end

-- Teleport loop toggle state
local running = false
local teleportTask

-- Teleport order 1-6 checkpoints
local checkpointOrder = {"1", "2", "3", "4", "5", "6"}

local function startTeleportLoop()
    teleportTask = task.spawn(function()
        while running do
            local npcs = getNPCs()
            for _, cp in ipairs(checkpointOrder) do
                if not running then break end
                teleportToCheckpoint(cp, npcs)
                task.wait(1) -- wait 1 second at each checkpoint
            end
        end
    end)
end

-- Add toggle to Train section
TrainSection:NewToggle("Toggle Teleport Checkpoints", "Loops teleporting player + NPCs through checkpoints 1 to 6", function(state)
    running = state
    if running then
        -- Safety check player HRP
        if not hrp or not hrp.Parent then
            warn("HumanoidRootPart not ready, waiting for character...")
            character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
            hrp = character:WaitForChild("HumanoidRootPart")
        end
        startTeleportLoop()
    else
        if teleportTask then
            task.cancel(teleportTask)
            teleportTask = nil
        end
    end
end)

-- Optional: Add UI toggle keybind
TrainSection:NewKeybind("Toggle UI", "Toggle UI visibility", Enum.KeyCode.M, function()
    Library:ToggleUI()
end)
------
