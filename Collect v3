local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local IslandsFolder = workspace:WaitForChild("Islands")

local uuidPattern = "%b{}"

local targetPartNames = {
    "Rocks",
    "Rock",
    "Flower",
    "Rocks 2",
    "Bush (1)",
    "Wheat Plane",
    "Rock 1",
    "Leaf",
    "Coconut",
    "Hay",
    "StrawBerries"
}

local function getHRP()
    local char = LocalPlayer.Character
    if not char then return nil end
    return char:FindFirstChild("HumanoidRootPart")
end

-- Cache excluded instances
local excludedPart = workspace:FindFirstChild("Islands")
    and workspace.Islands:FindFirstChild("Forest Island")
    and workspace.Islands["Forest Island"]:FindFirstChild("Enhanced Storage Locker")
    and workspace.Islands["Forest Island"]["Enhanced Storage Locker"]:FindFirstChild("Bounds")

local excludedFolder = workspace:FindFirstChild("Islands")
    and workspace.Islands:FindFirstChild("Forest Island")
    and workspace.Islands["Forest Island"]:FindFirstChild("Larry")

local function isDescendantOfExcludedFolder(instance)
    return excludedFolder and instance:IsDescendantOf(excludedFolder)
end

local function isTargetName(name, parentName)
    for _, targetName in ipairs(targetPartNames) do
        if name == targetName then
            -- Log is UUID only
            if targetName == "Log" then
                return parentName:match(uuidPattern) ~= nil
            end
            return true
        end
    end
    return false
end

local function findTargets(folder)
    local results = {}
    for _, descendant in ipairs(folder:GetDescendants()) do
        if descendant == excludedPart then
            -- Skip the excluded part
        elseif isDescendantOfExcludedFolder(descendant) then
            -- Skip everything inside the excluded folder
        elseif descendant:IsA("BasePart") or descendant:IsA("MeshPart") or descendant:IsA("UnionOperation") then
            if descendant:GetAttribute("interactionType") == "CollectableItem" then
                table.insert(results, descendant)
            elseif isTargetName(descendant.Name, descendant.Parent and descendant.Parent.Name or "") then
                table.insert(results, descendant)
            end
        end
    end
    return results
end

while true do
    local hrp = getHRP()
    if hrp then
        for _, island in ipairs(IslandsFolder:GetChildren()) do
            local targets = findTargets(island)
            for _, part in ipairs(targets) do
                hrp.CFrame = part.CFrame + Vector3.new(0, 5, 0)
                task.wait(0.3)
            end
        end
    else
        task.wait(0.5)
    end
    task.wait(1)
end
