local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local IslandsFolder = workspace:WaitForChild("Islands")

--- UUID pattern {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}
local uuidPattern = "%b{}"

-- Target part names we want to teleport to
local targetPartNames = {
    "Rocks",
    "Rock",
    "Fabric",
    "Flower",
    "Rocks 2",
    "Bush (1)",
    "Wheat Plane",
    "Rock 1",
    "Leaf",
    "Coconut",
    "Hay",
    "Part",
    "StrawBerries",
    "Bounds", -- UUID only
    "Log"     -- UUID only
}

local function getHRP()
    local char = LocalPlayer.Character
    if not char then return nil end
    return char:FindFirstChild("HumanoidRootPart")
end

-- Recursively search for any matching target part in a model/folder
local function findTargetPartsRecursive(folder, uuidOnly)
    local results = {}
    for _, child in ipairs(folder:GetChildren()) do
        if child:IsA("BasePart") or child:IsA("MeshPart") or child:IsA("UnionOperation") then
            for _, name in ipairs(targetPartNames) do
                if child.Name == name then
                    if not uuidOnly or folder.Name:match(uuidPattern) then
                        table.insert(results, child)
                    end
                end
            end
        elseif child:IsA("Folder") or child:IsA("Model") then
            -- If it's a model with UUID name, mark it for UUID-only targets
            local isUUID = child.Name:match(uuidPattern)
            for _, part in ipairs(findTargetPartsRecursive(child, uuidOnly or isUUID)) do
                table.insert(results, part)
            end
        end
    end
    return results
end

while true do
    local hrp = getHRP()
    if hrp then
        -- Loop through all islands
        for _, island in ipairs(IslandsFolder:GetChildren()) do
            -- Find all target parts inside this island
            local parts = findTargetPartsRecursive(island, false)
            for _, part in ipairs(parts) do
                -- Teleport above each target part
                hrp.CFrame = part.CFrame + Vector3.new(0, 5, 0)
                task.wait(0.3)
            end
        end
    else
        task.wait(0.5)
    end
    task.wait(1)
end
