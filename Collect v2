--- Services
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local LocalPlayer = Players.LocalPlayer

-- Folders
local IslandsFolder = Workspace:WaitForChild("Islands")
local ExplorerFolder = Workspace:FindFirstChild("Explorer")

-- UUID pattern
local uuidPattern = "%b{}"

-- Target names
local targetPartNames = {
    "Rocks",
    "Rock",
    "Rocks 2",
    "Rock 1",
    "Meshes"
}

-- Target MeshId
local targetMeshId = "rbxassetid://7007859978"

-- Target Color
local targetColor = Color3.fromRGB(163,162,165)

-- Get HumanoidRootPart safely
local function getHRP()
    local char = LocalPlayer.Character
    if not char or not char:FindFirstChild("HumanoidRootPart") then
        char = LocalPlayer.CharacterAdded:Wait()
    end
    return char:WaitForChild("HumanoidRootPart")
end

-- Excluded parts/folders for Forest Island
local excludedPart = IslandsFolder:FindFirstChild("Forest Island")
    and IslandsFolder["Forest Island"]:FindFirstChild("Enhanced Storage Locker")
    and IslandsFolder["Forest Island"]["Enhanced Storage Locker"]:FindFirstChild("Bounds")

local excludedFolder = IslandsFolder:FindFirstChild("Forest Island")
    and IslandsFolder["Forest Island"]:FindFirstChild("Larry")

local function isDescendantOfExcludedFolder(instance)
    return excludedFolder and instance:IsDescendantOf(excludedFolder)
end

-- Check if a part is a target by name
local function isTargetName(name)
    for _, targetName in ipairs(targetPartNames) do
        if name == targetName then
            return true
        end
    end
    return false
end

-- Check if a part has the target MeshId
local function hasTargetMeshId(part)
    if part:IsA("MeshPart") then
        return part.MeshId == targetMeshId
    else
        local mesh = part:FindFirstChildOfClass("SpecialMesh")
        if mesh then
            return mesh.MeshId == targetMeshId
        end
    end
    return false
end

-- Check if a part has the target Color
local function hasTargetColor(part)
    return part.Color == targetColor
end

-- Find targets inside a folder
local function findTargets(folder)
    local results = {}

    for _, descendant in ipairs(folder:GetDescendants()) do
        -- Skip excluded
        if excludedPart and descendant:IsDescendantOf(excludedPart) then
            -- Skip excluded part
        elseif isDescendantOfExcludedFolder(descendant) then
            -- Skip excluded folder
        elseif descendant:IsA("BasePart") or descendant:IsA("MeshPart") or descendant:IsA("UnionOperation") then
            if descendant:GetAttribute("interactionType") == "CollectableItem" then
                table.insert(results, descendant)
            elseif isTargetName(descendant.Name) then
                table.insert(results, descendant)
            elseif hasTargetMeshId(descendant) then
                table.insert(results, descendant)
            elseif hasTargetColor(descendant) then
                table.insert(results, descendant)
            end
        elseif descendant:IsA("Model") and descendant.PrimaryPart then
            -- If the model's PrimaryPart matches
            local p = descendant.PrimaryPart
            if isTargetName(p.Name) or hasTargetMeshId(p) or hasTargetColor(p) then
                table.insert(results, p)
            end
        end
    end

    return results
end

-- Collect all islands (Islands folder + UUIDs + Explorer)
local function getAllIslands()
    local all = {}

    -- Standard islands
    for _, island in ipairs(IslandsFolder:GetChildren()) do
        table.insert(all, island)
    end

    -- UUID folders in workspace
    for _, obj in ipairs(Workspace:GetChildren()) do
        if obj.Name:match(uuidPattern) and obj:IsA("Folder") then
            table.insert(all, obj)
        end
    end

    -- Explorer contents
    if ExplorerFolder then
        for _, island in ipairs(ExplorerFolder:GetChildren()) do
            table.insert(all, island)
        end
    end

    return all
end

-- Main loop
while true do
    local hrp = getHRP()
    if hrp then
        for _, island in ipairs(getAllIslands()) do
            local targets = findTargets(island)
            for _, part in ipairs(targets) do
                if part and part.Parent then
                    -- Teleport in front of the part, slightly above
                    hrp.CFrame = part.CFrame + part.CFrame.LookVector * 2 + Vector3.new(0, 5, 0)
                    task.wait(0.2)
                end
            end
        end
    else
        task.wait(0.5)
    end
    task.wait(1)
end
