local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")

local player = Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoidRootPart = character:WaitForChild("HumanoidRootPart")

local checkpoints = workspace.Islands["Training Island"]["Outdoor Arena"].DynamicArena
    :WaitForChild("_LAYOUT")
    :WaitForChild("CheckpointActivity")
    :WaitForChild("Routes")
    :WaitForChild("Checkpoints")

local checkpointOrder = {"1", "2", "3", "4"}
local teleporting = false
local moveTime = 1 -- Set to 1 second
local waitTime = 0.6

-- Start teleporting function
local function startTeleporting()
    teleporting = true

    while teleporting do
        for _, checkpointName in ipairs(checkpointOrder) do
            if not teleporting then break end

            local checkpoint = checkpoints:FindFirstChild(checkpointName)
            if checkpoint and checkpoint:IsA("BasePart") then
                local goalCFrame = checkpoint.CFrame * CFrame.new(0, 5, 0)

                local tweenInfo = TweenInfo.new(moveTime, Enum.EasingStyle.Linear)
                local tween = TweenService:Create(humanoidRootPart, tweenInfo, {CFrame = goalCFrame})
                tween:Play()
                tween.Completed:Wait()

                task.wait(waitTime)
            end
        end
    end
end

-- Toggle with button (optional keybind or external control)
UserInputService.InputBegan:Connect(function(input, gameProcessed)
    if gameProcessed then return end
    if input.KeyCode == Enum.KeyCode.T then -- Press T to toggle
        teleporting = not teleporting
        if teleporting then
            task.spawn(startTeleporting)
        end
    end
end)
