local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Fire initial remotes to start layout and interactable
local args1 = {
    [1] = "SelectLayout";
    [2] = workspace:WaitForChild("Islands", 9e9):WaitForChild("Training Island", 9e9):WaitForChild("Outdoor Arena", 9e9):WaitForChild("DynamicArena", 9e9);
    [3] = 1;
}
game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9):GetChildren()[45]:FireServer(unpack(args1))

local args2 = {
    [1] = "TriggerInteractable";
    [2] = workspace:WaitForChild("Islands", 9e9):WaitForChild("Training Island", 9e9):WaitForChild("Outdoor Arena", 9e9):WaitForChild("DynamicArena", 9e9):WaitForChild("_LAYOUT", 9e9):WaitForChild("CheckpointActivity", 9e9);
}
game:GetService("ReplicatedStorage"):WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9):GetChildren()[36]:FireServer(unpack(args2))

-- Continue normal flow
local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")

local checkpointsRoot = workspace.Islands["Training Island"]["Outdoor Arena"].DynamicArena
    ._LAYOUT.CheckpointActivity.Routes

-- Static list of known UUID NPCs
local uuids = {
    "{60f828f4-a916-4262-842e-7ddc49e07ad9}",
    "{c5769905-aecf-4d7a-ada9-064802b0cae9}",
    "{d2227f02-c482-4911-b201-7e842b31c47c}",
    "{6b019e60-21c6-4536-9a06-4cbfee80d88f}",
    "{12916ad6-7fd9-46d5-8bc1-e69671249721}",
}

local function isUUID(str)
    return string.match(str, "^%b{}$") ~= nil
end

local function getNPCs()
    local folder = workspace.Islands["Training Island"]
    local npcList = {}

    for _, uuid in ipairs(uuids) do
        local model = folder:FindFirstChild(uuid)
        if model and model:IsA("Model") then
            local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
            if root then
                model.PrimaryPart = root
                table.insert(npcList, model)
            end
        end
    end

    for _, model in ipairs(folder:GetDescendants()) do
        if model:IsA("Model") and isUUID(model.Name) and not table.find(uuids, model.Name) then
            if model:FindFirstChildWhichIsA("Humanoid") then
                local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                if root then
                    model.PrimaryPart = root
                    table.insert(npcList, model)
                end
            end
        end
    end

    return npcList
end

-- Get all checkpoints from all routes sorted by route then checkpoint number
local function getAllCheckpoints()
    local checkpoints = {}

    for _, routeFolder in ipairs(checkpointsRoot:GetChildren()) do
        if routeFolder:IsA("Folder") then
            local sortedCheckpoints = {}

            for _, checkpoint in ipairs(routeFolder:GetChildren()) do
                if checkpoint:IsA("BasePart") then
                    table.insert(sortedCheckpoints, checkpoint)
                end
            end

            table.sort(sortedCheckpoints, function(a, b)
                return tonumber(a.Name) < tonumber(b.Name)
            end)

            for _, cp in ipairs(sortedCheckpoints) do
                table.insert(checkpoints, cp)
            end
        end
    end

    return checkpoints
end

-- Custom wait times per checkpoint name (fallback to 2 seconds)
local checkpointWaits = {
    ["1"] = 1.5,
    ["2"] = 3,
    ["3"] = 2,
    ["4"] = 5,
    ["5"] = 1,
    ["6"] = 2.5,
}
local DEFAULT_WAIT = 2

-- GUI setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportToggleGui"
screenGui.Parent = PlayerGui
screenGui.ResetOnSpawn = false

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 140, 0, 50)
button.Position = UDim2.new(0, 20, 0, 20)
button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
button.TextColor3 = Color3.new(1, 1, 1)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 24
button.Text = "Start Teleport"
button.Parent = screenGui

local running = false
local teleportTask

local function teleportToCheckpoint(checkpoint, npcs)
    if not checkpoint or not checkpoint:IsA("BasePart") then return end

    local targetPosPlayer = checkpoint.Position + Vector3.new(2, 3, 0)
    local targetPosNPC = checkpoint.Position + Vector3.new(-2, 3, 0)

    -- Instant teleport player
    HRP.CFrame = CFrame.new(targetPosPlayer)

    -- Instant teleport NPCs and make them jump
    for _, npc in ipairs(npcs) do
        if npc.PrimaryPart then
            npc:SetPrimaryPartCFrame(CFrame.new(targetPosNPC))

            local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
            if humanoid then
                humanoid.Jump = true
            end
        end
    end

    local waitTime = checkpointWaits[checkpoint.Name] or DEFAULT_WAIT
    task.wait(waitTime)
end

local function startTeleportLoop()
    teleportTask = task.spawn(function()
        local npcs = getNPCs()
        local checkpoints = getAllCheckpoints()
        local index = 1

        while running and #checkpoints > 0 do
            local checkpoint = checkpoints[index]
            if not checkpoint then break end

            teleportToCheckpoint(checkpoint, npcs)

            index = index + 1
            if index > #checkpoints then
                checkpoints = getAllCheckpoints()
                index = 1
            end
        end
    end)
end

button.MouseButton1Click:Connect(function()
    running = not running
    button.Text = running and "Stop Teleport" or "Start Teleport"

    if running then
        startTeleportLoop()
    end
end)
