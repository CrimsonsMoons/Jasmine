local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Wait for character and HumanoidRootPart
local function waitForCharacter()
    local char = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    local hrp = char:WaitForChild("HumanoidRootPart", 10)
    if not hrp then
        error("HumanoidRootPart not found")
    end
    return char, hrp
end

local Character, HRP = waitForCharacter()

-- RemoteEvents folder
local eventsFolder = ReplicatedStorage:WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9)
local selectLayoutEvent = eventsFolder:GetChildren()[45]
local triggerInteractableEvent = eventsFolder:GetChildren()[36]

if not selectLayoutEvent then
    warn("SelectLayout RemoteEvent not found at index 45")
end
if not triggerInteractableEvent then
    warn("TriggerInteractable RemoteEvent not found at index 36")
end

-- Args for remotes
local args1 = {
    [1] = "SelectLayout";
    [2] = workspace:WaitForChild("Islands", 9e9)
                :WaitForChild("Training Island", 9e9)
                :WaitForChild("Outdoor Arena", 9e9)
                :WaitForChild("DynamicArena", 9e9);
    [3] = 3;
}

local args2 = {
    [1] = "TriggerInteractable";
    [2] = workspace:WaitForChild("Islands", 9e9)
                :WaitForChild("Training Island", 9e9)
                :WaitForChild("Outdoor Arena", 9e9)
                :WaitForChild("DynamicArena", 9e9)
                :WaitForChild("_LAYOUT", 9e9)
                :WaitForChild("CheckpointActivity", 9e9);
}

-- Fire remotes safely
local function activateRemotes()
    if selectLayoutEvent then
        print("Firing SelectLayout remote...")
        selectLayoutEvent:FireServer(unpack(args1))
        print("Fired SelectLayout remote.")
    end
    if triggerInteractableEvent then
        print("Firing TriggerInteractable remote...")
        triggerInteractableEvent:FireServer(unpack(args2))
        print("Fired TriggerInteractable remote.")
    end
end

activateRemotes()

-- Checkpoints folder and order
local checkpointsFolder = workspace.Islands["Training Island"]["Outdoor Arena"].DynamicArena
    ._LAYOUT.CheckpointActivity.Routes

local order = {"1", "2", "3", "4", "5", "6"}

-- Static list of known UUIDs
local uuids = {
    "{60f828f4-a916-4262-842e-7ddc49e07ad9}",
    "{c5769905-aecf-4d7a-ada9-064802b0cae9}",
    "{d2227f02-c482-4911-b201-7e842b31c47c}",
    "{6b019e60-21c6-4536-9a06-4cbfee80d88f}",
    "{12916ad6-7fd9-46d5-8bc1-e69671249721}",
}

local function isUUID(str)
    return string.match(str, "^%b{}$") ~= nil
end

-- Get all valid NPCs (static list + dynamic scan)
local function getNPCs()
    local folder = workspace.Islands["Training Island"]
    local npcList = {}

    for _, uuid in ipairs(uuids) do
        local model = folder:FindFirstChild(uuid)
        if model and model:IsA("Model") then
            local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
            if root then
                model.PrimaryPart = root
                table.insert(npcList, model)
            end
        end
    end

    for _, model in ipairs(folder:GetDescendants()) do
        if model:IsA("Model") and isUUID(model.Name) and not table.find(uuids, model.Name) then
            if model:FindFirstChildWhichIsA("Humanoid") then
                local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                if root then
                    model.PrimaryPart = root
                    table.insert(npcList, model)
                end
            end
        end
    end

    return npcList
end

-- GUI setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportToggleGui"
screenGui.Parent = PlayerGui
screenGui.ResetOnSpawn = false

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 140, 0, 50)
button.Position = UDim2.new(0, 20, 0, 20)
button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
button.TextColor3 = Color3.new(1, 1, 1)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 24
button.Text = "Start Teleport"
button.Parent = screenGui

-- Teleport logic
local running = false
local teleportTask

local function teleportToCheckpoint(checkpointName, npcs)
    local checkpoint = checkpointsFolder:FindFirstChild(checkpointName)
    if not checkpoint or not checkpoint:IsA("BasePart") then
        warn("Checkpoint not found or invalid: "..tostring(checkpointName))
        return
    end

    -- Refresh Character and HRP references (handle respawn)
    Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
    HRP = Character:FindFirstChild("HumanoidRootPart")
    if not HRP then
        warn("Player HumanoidRootPart missing!")
        return
    end

    print("Teleporting player to checkpoint:", checkpointName)
    HRP.CFrame = checkpoint.CFrame + Vector3.new(2, 3, 0)
    print("Player teleported.")

    for _, npc in ipairs(npcs) do
        if npc.PrimaryPart then
            npc:SetPrimaryPartCFrame(checkpoint.CFrame + Vector3.new(-2, 3, 0))
            local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
            if humanoid and humanoid.Health > 0 then
                humanoid.Jump = true
            end
            print("Teleported NPC:", npc.Name)
        end
    end
end

local function startLoop()
    teleportTask = task.spawn(function()
        local npcs = getNPCs()
        while running do
            for _, checkpoint in ipairs(order) do
                if not running then break end
                teleportToCheckpoint(checkpoint, npcs)
                task.wait(1)
            end
        end
    end)
end

button.MouseButton1Click:Connect(function()
    running = not running
    button.Text = running and "Stop Teleport" or "Start Teleport"
    if running then
        if not (LocalPlayer.Character and LocalPlayer.Character.Parent) then
            LocalPlayer.CharacterAdded:Wait()
        end
        Character, HRP = waitForCharacter()
        startLoop()
    else
        if teleportTask then
            task.cancel(teleportTask)
            teleportTask = nil
        end
    end
end)
---
