local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- GUI setup
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportToggleGui"
screenGui.Parent = PlayerGui

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 140, 0, 50)
button.Position = UDim2.new(0, 20, 0, 20)
button.BackgroundColor3 = Color3.fromRGB(45, 45, 45)
button.TextColor3 = Color3.new(1, 1, 1)
button.Font = Enum.Font.SourceSansBold
button.TextSize = 24
button.Text = "Start Teleport"
button.Parent = screenGui

local running = false
local teleportTask

button.MouseButton1Click:Connect(function()
    running = not running
    button.Text = running and "Stop Teleport" or "Start Teleport"

    if running then
        teleportTask = task.spawn(function()
            local success, err = pcall(function()
                print("[DEBUG] Starting teleport loop")

                local trainingIsland = workspace:Islands():WaitForChild("Training Island", 10)
                local checkpointsFolder = trainingIsland:WaitForChild("Outdoor Arena", 10)
                    :WaitForChild("DynamicArena", 10)
                    :WaitForChild("_LAYOUT", 10)
                    :WaitForChild("CheckpointActivity", 10)
                    :WaitForChild("Routes", 10)
                    :WaitForChild("1", 10)

                print("[DEBUG] Checkpoints folder found:", checkpointsFolder:GetFullName())

                local staticUUIDs = {
                    "{60f828f4-a916-4262-842e-7ddc49e07ad9}",
                    "{c5769905-aecf-4d7a-ada9-064802b0cae9}",
                    "{d2227f02-c482-4911-b201-7e842b31c47c}",
                    "{6b019e60-21c6-4536-9a06-4cbfee80d88f}",
                    "{12916ad6-7fd9-46d5-8bc1-e69671249721}"
                }

                local function isUUID(str)
                    return string.match(str, "^%b{}$") ~= nil
                end

                local function getNPCs()
                    local npcList = {}
                    for _, uuid in ipairs(staticUUIDs) do
                        local model = trainingIsland:FindFirstChild(uuid)
                        if model and model:IsA("Model") then
                            local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                            if root then
                                model.PrimaryPart = root
                                table.insert(npcList, model)
                            else
                                warn("[WARN] Static UUID "..uuid.." missing root part")
                            end
                        else
                            warn("[WARN] Static UUID "..uuid.." model missing")
                        end
                    end

                    for _, model in ipairs(trainingIsland:GetDescendants()) do
                        if model:IsA("Model") and isUUID(model.Name) and not table.find(staticUUIDs, model.Name) then
                            if model:FindFirstChildWhichIsA("Humanoid") then
                                local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                                if root then
                                    model.PrimaryPart = root
                                    table.insert(npcList, model)
                                else
                                    warn("[WARN] Dynamic UUID "..model.Name.." missing root part")
                                end
                            end
                        end
                    end
                    return npcList
                end

                local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
                local HRP = Character:FindFirstChild("HumanoidRootPart")
                if not HRP then
                    error("HumanoidRootPart not found on player character")
                end

                local checkpointOrder = {"1", "2", "3", "4", "5", "6"}

                while running do
                    local npcs = getNPCs()
                    print("[DEBUG] NPCs found: "..#npcs)

                    for _, checkpointName in ipairs(checkpointOrder) do
                        if not running then break end
                        local checkpoint = checkpointsFolder:FindFirstChild(checkpointName)
                        if checkpoint and checkpoint:IsA("BasePart") then
                            print("[DEBUG] Teleporting to checkpoint: "..checkpointName)

                            -- Teleport player directly to checkpoint CFrame plus offset 0,5,0 to avoid stuck inside floor
                            local targetCFrame = checkpoint.CFrame + Vector3.new(0, 5, 0)
                            HRP.CFrame = targetCFrame

                            for _, npc in ipairs(npcs) do
                                if npc.PrimaryPart then
                                    npc:SetPrimaryPartCFrame(targetCFrame * CFrame.new(-3, 0, 0))
                                else
                                    warn("[WARN] NPC "..npc.Name.." missing PrimaryPart")
                                end
                            end

                        else
                            warn("[WARN] Checkpoint '"..tostring(checkpointName).."' missing or not a BasePart")
                        end
                        task.wait(2)
                    end
                end
            end)

            if not success then
                warn("[ERROR] Teleport loop error: "..tostring(err))
            end
        end)
    else
        print("[DEBUG] Stopping teleport loop")
    end
end)
-------
