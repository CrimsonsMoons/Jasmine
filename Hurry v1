--------
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local hrp = Character:WaitForChild("HumanoidRootPart")

-- Reconnect HRP on respawn
LocalPlayer.CharacterAdded:Connect(function(char)
    Character = char
    hrp = Character:WaitForChild("HumanoidRootPart")
end)

-- Checkpoints Folder path
local checkpointsFolder = workspace.Islands["Training Island"]["Outdoor Arena"].DynamicArena._LAYOUT.CheckpointActivity.Routes

-- Static list of known UUIDs
local uuids = {
    "{60f828f4-a916-4262-842e-7ddc49e07ad9}",
    "{c5769905-aecf-4d7a-ada9-064802b0cae9}",
    "{d2227f02-c482-4911-b201-7e842b31c47c}",
    "{6b019e60-21c6-4536-9a06-4cbfee80d88f}",
    "{12916ad6-7fd9-46d5-8bc1-e69671249721}",
}

local function isUUID(str)
    return string.match(str, "^%b{}$") ~= nil
end

local function getNPCs()
    local folder = workspace.Islands["Training Island"]
    local npcList = {}

    for _, uuid in ipairs(uuids) do
        local model = folder:FindFirstChild(uuid)
        if model and model:IsA("Model") then
            local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
            if root then
                model.PrimaryPart = root
                table.insert(npcList, model)
            end
        end
    end

    for _, model in ipairs(folder:GetDescendants()) do
        if model:IsA("Model") and isUUID(model.Name) and not table.find(uuids, model.Name) then
            if model:FindFirstChildWhichIsA("Humanoid") then
                local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                if root then
                    model.PrimaryPart = root
                    table.insert(npcList, model)
                end
            end
        end
    end

    return npcList
end

local jumpRunning = false
local jumpTask

local function freezeJumpLoop(npcs)
    if jumpRunning then return end
    jumpRunning = true
    jumpTask = task.spawn(function()
        while jumpRunning do
            local char = LocalPlayer.Character
            if char then
                local humanoid = char:FindFirstChildWhichIsA("Humanoid")
                local hrp = char:FindFirstChild("HumanoidRootPart")
                if humanoid and hrp and humanoid.Health > 0 then
                    humanoid.Jump = true
                    humanoid.PlatformStand = true
                    hrp.Anchored = true
                end
            end

            for _, npc in ipairs(npcs) do
                if npc and npc.Parent then
                    local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
                    local root = npc.PrimaryPart
                    if humanoid and root and humanoid.Health > 0 then
                        humanoid.Jump = true
                        humanoid.PlatformStand = true
                        root.Anchored = true
                    end
                end
            end
            task.wait(0.1)
        end
    end)
end

local function unfreezeJumpLoop(npcs)
    jumpRunning = false
    if jumpTask then
        task.cancel(jumpTask)
        jumpTask = nil
    end

    local char = LocalPlayer.Character
    if char then
        local humanoid = char:FindFirstChildWhichIsA("Humanoid")
        local hrp = char:FindFirstChild("HumanoidRootPart")
        if humanoid and hrp then
            humanoid.PlatformStand = false
            hrp.Anchored = false
        end
    end

    for _, npc in ipairs(npcs) do
        if npc and npc.Parent then
            local humanoid = npc:FindFirstChildWhichIsA("Humanoid")
            local root = npc.PrimaryPart
            if humanoid and root then
                humanoid.PlatformStand = false
                root.Anchored = false
            end
        end
    end
end

local function teleportToCheckpoint(checkpointName, npcs)
    local route = checkpointsFolder["1"]
    if not route then
        warn("Route '1' not found in checkpoints.")
        return
    end

    local checkpoint = route:FindFirstChild(checkpointName)
    if not checkpoint or not checkpoint:IsA("BasePart") then
        warn("Checkpoint '"..checkpointName.."' not found or invalid.")
        return
    end

    if hrp and hrp.Parent then
        hrp.CFrame = checkpoint.CFrame + Vector3.new(2, 3, 0)
    end

    for _, npc in ipairs(npcs) do
        if npc.PrimaryPart and npc.PrimaryPart.Parent then
            npc:SetPrimaryPartCFrame(checkpoint.CFrame + Vector3.new(-2, 3, 0))
        end
    end
end

local running = false
local teleportTask
local checkpointOrder = {"1","2","3","4","5","6"}

local function startLoop()
    teleportTask = task.spawn(function()
        local npcs = getNPCs()
        freezeJumpLoop(npcs)
        while running do
            for _, checkpointName in ipairs(checkpointOrder) do
                if not running then break end
                teleportToCheckpoint(checkpointName, npcs)
                task.wait(1.4)
            end
        end
        unfreezeJumpLoop(npcs)
    end)
end

-- --- GUI Creation ---

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "TeleportFreezeToggleGUI"
screenGui.ResetOnSpawn = false
screenGui.Parent = PlayerGui

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 200, 0, 60)
frame.Position = UDim2.new(0, 20, 0, 20)
frame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
frame.BorderSizePixel = 0
frame.Parent = screenGui

local toggleBtn = Instance.new("TextButton")
toggleBtn.Size = UDim2.new(1, -20, 0, 40)
toggleBtn.Position = UDim2.new(0, 10, 0, 10)
toggleBtn.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
toggleBtn.TextColor3 = Color3.new(1,1,1)
toggleBtn.Font = Enum.Font.GothamBold
toggleBtn.TextSize = 22
toggleBtn.Text = "Start Teleport Loop"
toggleBtn.Parent = frame

local function updateButton(state)
    if state then
        toggleBtn.Text = "Stop Teleport Loop"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(180, 70, 70)
    else
        toggleBtn.Text = "Start Teleport Loop"
        toggleBtn.BackgroundColor3 = Color3.fromRGB(70, 130, 180)
    end
end

toggleBtn.MouseButton1Click:Connect(function()
    running = not running
    updateButton(running)
    if running then
        startLoop()
    else
        if teleportTask then
            task.cancel(teleportTask)
            teleportTask = nil
        end
        unfreezeJumpLoop(getNPCs())
    end
end)

updateButton(false)
