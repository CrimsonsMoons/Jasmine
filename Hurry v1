local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")

-- Load Kavo UI Library
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/xHeptc/Kavo-UI-Library/main/source.lua"))()

-- Create UI Window with "Midnight" theme
local Window = Library.CreateLib("Training Island Teleport", "Midnight")

-- Create Main Tab
local MainTab = Window:NewTab("Main")

-- Create Section in Main Tab
local MainSection = MainTab:NewSection("Teleport Controls")

-- Variables
local running = false
local teleportTask

local Character = LocalPlayer.Character or LocalPlayer.CharacterAdded:Wait()
local HRP = Character:WaitForChild("HumanoidRootPart")

local checkpointsFolder = workspace.Islands["Training Island"]["Outdoor Arena"]
    .DynamicArena._LAYOUT.CheckpointActivity.Routes["1"]

local uuids = {
    "{60f828f4-a916-4262-842e-7ddc49e07ad9}",
    "{c5769905-aecf-4d7a-ada9-064802b0cae9}",
    "{d2227f02-c482-4911-b201-7e842b31c47c}",
    "{6b019e60-21c6-4536-9a06-4cbfee80d88f}",
    "{12916ad6-7fd9-46d5-8bc1-e69671249721}",
}

local function isUUID(str)
    return string.match(str, "^%b{}$") ~= nil
end

local function getNPCs()
    local folder = workspace.Islands["Training Island"]
    local npcList = {}

    for _, uuid in ipairs(uuids) do
        local model = folder:FindFirstChild(uuid)
        if model and model:IsA("Model") then
            local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
            if root then
                model.PrimaryPart = root
                table.insert(npcList, model)
            end
        end
    end

    for _, model in ipairs(folder:GetDescendants()) do
        if model:IsA("Model") and isUUID(model.Name) and not table.find(uuids, model.Name) then
            if model:FindFirstChildWhichIsA("Humanoid") then
                local root = model:FindFirstChild("HumanoidRootPart") or model:FindFirstChildWhichIsA("BasePart")
                if root then
                    model.PrimaryPart = root
                    table.insert(npcList, model)
                end
            end
        end
    end

    return npcList
end

local order = {"1", "2", "3", "4", "5", "6"}

local function teleportToCheckpoint(checkpointName, npcs)
    local checkpoint = checkpointsFolder:FindFirstChild(checkpointName)
    if not checkpoint or not checkpoint:IsA("BasePart") then return end

    -- Teleport player slightly offset so they don't clip into the part
    HRP.CFrame = checkpoint.CFrame + Vector3.new(2, 3, 0)

    -- Teleport all valid NPCs slightly offset opposite side
    for _, npc in ipairs(npcs) do
        if npc.PrimaryPart then
            npc:SetPrimaryPartCFrame(checkpoint.CFrame + Vector3.new(-2, 3, 0))
        end
    end
end

local function startLoop()
    teleportTask = task.spawn(function()
        local npcs = getNPCs()
        while running do
            for _, checkpoint in ipairs(order) do
                if not running then break end
                teleportToCheckpoint(checkpoint, npcs)
                task.wait(1)
            end
        end
    end)
end

-- Toggle button in Kavo UI
MainSection:NewToggle("Toggle Teleport Loop", "Start or stop teleporting through checkpoints", function(state)
    running = state
    if running then
        startLoop()
    end
end)
