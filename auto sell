-- Services
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- Hardcoded known-good index (change to 17, 18, etc. if needed)
local sellRemote = ReplicatedStorage:WaitForChild("Communication", 9e9)
    :WaitForChild("Events", 9e9):GetChildren()[18] -- <-- Update this index as needed

-- Check if it's a valid UUID
local function isUUID(name)
    return typeof(name) == "string" and name:match("^%b{}$") ~= nil
end

-- Get the correct UUID list folder dynamically
local function getUUIDListFolder()
    local contentList
    pcall(function()
        contentList = LocalPlayer.PlayerGui.Menus.Backpack.Main.Inventory.Content.List
    end)
    if not contentList then return nil end

    for _, folder in ipairs(contentList:GetChildren()) do
        local list = folder:FindFirstChild("List")
        if list then
            for _, item in ipairs(list:GetChildren()) do
                if isUUID(item.Name) then
                    return list
                end
            end
        end
    end
    return nil
end

-- Build the exact args table you used manually
local function buildArgs()
    local listFolder = getUUIDListFolder()
    if not listFolder then return nil end

    local sellTable = {}
    for _, item in ipairs(listFolder:GetChildren()) do
        if isUUID(item.Name)
        and not item:FindFirstChild("Locked")
        and not item:FindFirstChild("SpecialIndicator") then
            sellTable[item.Name] = 1
        end
    end

    if next(sellTable) then
        return {
            [1] = "SellItems",
            [2] = sellTable
        }
    end

    return nil
end

-- Auto-sell loop using unpack(args)
while true do
    local args = buildArgs()
    if args then
        sellRemote:FireServer(unpack(args)) -- ✅ MATCHES YOUR WORKING FORMAT
        print("✅ Sold items:", args[2])
    else
        print("⚠️ Nothing to sell or folder missing.")
    end
    task.wait(5)
end
