local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

-- üîÅ Remote indices to test
local POSSIBLE_INDICES = {17, 18, 16}

-- ‚úÖ Find the correct SellItems remote
local function findWorkingRemote()
    local events = ReplicatedStorage:WaitForChild("Communication", 9e9):WaitForChild("Events", 9e9)
    for _, index in ipairs(POSSIBLE_INDICES) do
        local remote = events:GetChildren()[index]
        if remote and remote:IsA("RemoteEvent") then
            local success = pcall(function()
                remote:FireServer("SellItems", {})
            end)
            if success then
                print("‚úÖ Found SellItems remote at index:", index)
                return remote
            end
        end
    end
    error("‚ùå Could not find working SellItems remote.")
end

local sellRemote = findWorkingRemote()

-- üß† UUID checker
local function isUUID(name)
    return typeof(name) == "string" and name:match("^%b{}$") ~= nil
end

-- üîç Scan for folder containing UUID items
local function findListFolder()
    local listRoot = LocalPlayer:WaitForChild("PlayerGui")
        :WaitForChild("Menus")
        :WaitForChild("Backpack")
        :WaitForChild("Main")
        :WaitForChild("Inventory")
        :WaitForChild("Content")
        :WaitForChild("List")

    for _, folder in ipairs(listRoot:GetChildren()) do
        local list = folder:FindFirstChild("List")
        if list then
            for _, item in ipairs(list:GetChildren()) do
                if isUUID(item.Name) then
                    return list
                end
            end
        end
    end

    warn("‚ùå No valid inventory list folder found.")
    return nil
end

-- üí∞ Build sell table
local function buildSellTable()
    local listFolder = findListFolder()
    if not listFolder then return nil end

    local sellTable = {}
    for _, item in ipairs(listFolder:GetChildren()) do
        if isUUID(item.Name)
        and not item:FindFirstChild("Locked")
        and not item:FindFirstChild("SpecialIndicator") then
            sellTable[item.Name] = 1
        end
    end
    return sellTable
end

-- üîÅ Auto-sell loop
while true do
    local sellTable = buildSellTable()
    if sellTable and next(sellTable) then
        sellRemote:FireServer("SellItems", sellTable)
        print("‚úÖ Sold:", sellTable)
    else
        print("‚ö†Ô∏è No sellable items found.")
    end
    task.wait(5)
end
